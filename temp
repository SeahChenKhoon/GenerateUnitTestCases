import pytest
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
from unittest.mock import patch, MagicMock
from theory_evaluation.utils import (
from theory_evaluation import models
from uuid import UUID
import pydantic

['def test_init_db_session(monkeypatch):\n    monkeypatch.setenv("DB_USER", "user")\n    monkeypatch.setenv("DB_PASSWORD", "password")\n    monkeypatch.setenv("DB_NAME", "dbname")\n    monkeypatch.setenv("DB_HOST", "localhost")\n    monkeypatch.setenv("DB_PORT", "5432")\n    monkeypatch.setenv("SSL_MODE", "require")\n    monkeypatch.setenv("ENVIRONMENT", "production")', 'def test_validate_user_exists(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_user = MagicMock()\n    mock_db.query.return_value.filter.return_value.first.return_value = mock_user', 'def test_validate_user_not_exists(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_db.query.return_value.filter.return_value.first.return_value = None', 'def test_validate_user_operational_error(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_db.query.side_effect = OperationalError("error", "params", "orig")', 'def test_get_marking_scheme_exists(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_curriculum = MagicMock()\n    mock_curriculum.question = "Question"\n    mock_curriculum.marking_scheme = "Scheme"\n    mock_curriculum.model_answer = "Answer"\n    mock_db.query.return_value.filter.return_value.first.return_value = mock_curriculum', 'def test_get_marking_scheme_not_exists(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_db.query.return_value.filter.return_value.first.return_value = None', 'def test_get_user_performance_exists(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_performance = MagicMock()\n    mock_performance.user_attempts = 1\n    mock_performance.llm_evaluation = "Evaluation"\n    mock_performance.user_grade = "Grade"\n    mock_performance.llm_evaluation_status = 2\n    mock_db.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance', 'def test_get_user_performance_not_exists(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_db.query.return_value.filter.return_value.order_by.return_value.first.return_value = None', 'def test_manage_user_performance_create_attempt(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_performance = MagicMock()\n    mock_performance.user_attempts = 1\n    mock_performance.llm_evaluation = None\n    mock_db.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance', 'def test_manage_user_performance_update_performance(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_performance = MagicMock()\n    mock_db.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance', 'def test_manage_user_performance_decrement_attempts(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_performance = MagicMock()\n    mock_performance.user_attempts = 2\n    mock_db.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance', 'def test_delete_user_performance_exists(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_performance = MagicMock()\n    mock_db.query.return_value.filter.return_value.all.return_value = [mock_performance]', 'def test_delete_user_performance_not_exists(mock_session):\n    mock_db = MagicMock()\n    mock_session.return_value.__enter__.return_value = mock_db\n    mock_db.query.return_value.filter.return_value.all.return_value = []']
