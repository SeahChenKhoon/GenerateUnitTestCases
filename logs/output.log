2025-04-17 14:53:23,367 - INFO - Loading environment variables start
2025-04-17 14:53:23,372 - INFO - Loading environment variables completes
2025-04-17 14:53:23,372 - INFO - Initialising of LLM start
2025-04-17 14:53:23,873 - INFO - Initialising of LLM completes
2025-04-17 14:53:23,873 - INFO - Getting python file starts
2025-04-17 14:53:23,874 - INFO - Getting python file completes
2025-04-17 14:53:23,874 - INFO - 
Start Processing file: theory_evaluation\circle_utils.py
2025-04-17 14:53:23,875 - INFO - Extraction of function and class start
2025-04-17 14:53:23,875 - INFO - extraction of function and class complete
2025-04-17 14:53:23,875 - INFO - Generate Unit Test Case starts
2025-04-17 14:53:23,875 - INFO - Extract unique import start
2025-04-17 14:53:25,719 - INFO - Extract unique import complete
2025-04-17 14:53:25,720 - INFO - Update relative import start
2025-04-17 14:53:25,721 - INFO - Update relative import complete
2025-04-17 14:53:30,728 - INFO - Generate Unit Test Case complete
2025-04-17 14:53:30,736 - INFO - run_each_pytest_function_individually start
2025-04-17 14:53:40,276 - INFO - Number of test case to process - 6
2025-04-17 14:53:40,276 - INFO - 
TEST CASE 1 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_area = math.pi * radius ** 2

---------------
2025-04-17 14:53:41,358 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 14:53:41,358 - INFO - 
TEST CASE 2 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

---------------
2025-04-17 14:53:42,422 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 14:53:42,422 - INFO - 
TEST CASE 3 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_area = 0.0

---------------
2025-04-17 14:53:43,793 - INFO - TEST CASE 3 Retry 0 - Result - Passed
2025-04-17 14:53:43,793 - INFO - 
TEST CASE 4 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_circumference = 2 * math.pi * radius

---------------
2025-04-17 14:53:44,947 - INFO - TEST CASE 4 Retry 0 - Result - Passed
2025-04-17 14:53:44,947 - INFO - 
TEST CASE 5 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

---------------
2025-04-17 14:53:46,000 - INFO - TEST CASE 5 Retry 0 - Result - Passed
2025-04-17 14:53:46,000 - INFO - 
TEST CASE 6 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_circumference = 0.0

---------------
2025-04-17 14:53:47,096 - INFO - TEST CASE 6 Retry 0 - Result - Passed
2025-04-17 14:53:47,096 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_area = math.pi * radius ** 2

def test_circle_area_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

def test_circle_area_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_area = 0.0

def test_circle_circumference_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_circumference = 2 * math.pi * radius

def test_circle_circumference_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

def test_circle_circumference_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_circumference = 0.0

2025-04-17 14:53:51,254 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest

def test_circle_area_returns_correct_value_for_positive_radius():
    radius = 3.0
    expected_area = math.pi * radius ** 2

def test_circle_area_raises_value_error_for_negative_radius():
    radius = -1.0

def test_circle_area_returns_zero_for_zero_radius():
    radius = 0.0
    expected_area = 0.0

def test_circle_circumference_returns_correct_value_for_positive_radius():
    radius = 3.0
    expected_circumference = 2 * math.pi * radius

def test_circle_circumference_raises_value_error_for_negative_radius():
    radius = -1.0

def test_circle_circumference_returns_zero_for_zero_radius():
    radius = 0.0
    expected_circumference = 0.0
2025-04-17 14:53:52,396 - INFO - Improvement of test cases processed successfully
2025-04-17 14:53:52,396 - INFO - run_each_pytest_function_individually complete
2025-04-17 14:53:52,396 - INFO - End Processing file: theory_evaluation\circle_utils.py

2025-04-17 14:53:52,396 - INFO - 
Start Processing file: theory_evaluation\config.py
2025-04-17 14:53:52,396 - INFO - Extraction of function and class start
2025-04-17 14:53:52,397 - INFO - extraction of function and class complete
2025-04-17 14:53:52,397 - INFO - Generate Unit Test Case starts
2025-04-17 14:53:52,397 - INFO - Extract unique import start
2025-04-17 14:53:52,946 - INFO - Extract unique import complete
2025-04-17 14:53:52,946 - INFO - Update relative import start
2025-04-17 14:53:52,947 - INFO - Update relative import complete
2025-04-17 14:54:02,368 - INFO - Generate Unit Test Case complete
2025-04-17 14:54:02,372 - INFO - run_each_pytest_function_individually start
2025-04-17 14:54:14,552 - INFO - Number of test case to process - 6
2025-04-17 14:54:14,552 - INFO - 
TEST CASE 1 Retry 0
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



def test_settings_default_values():
    expected_api_name = "project_simulation_fastapi"
    expected_api_v1_str = "/api/v1"
    expected_logger_config_path = "../conf/base/logging.yml"
    settings = Settings()
    assert settings.API_NAME == expected_api_name
    assert settings.API_V1_STR == expected_api_v1_str
    assert settings.LOGGER_CONFIG_PATH == expected_logger_config_path

---------------
2025-04-17 14:54:16,965 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 14:54:16,965 - INFO - 
TEST CASE 2 Retry 0
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



def test_settings_custom_values():
    custom_api_name = "custom_api"
    custom_api_v1_str = "/custom/v1"
    custom_logger_config_path = "/custom/path/logging.yml"
    settings = Settings(API_NAME=custom_api_name, API_V1_STR=custom_api_v1_str, LOGGER_CONFIG_PATH=custom_logger_config_path)
    assert settings.API_NAME == custom_api_name
    assert settings.API_V1_STR == custom_api_v1_str
    assert settings.LOGGER_CONFIG_PATH == custom_logger_config_path

---------------
2025-04-17 14:54:18,145 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 14:54:18,146 - INFO - 
TEST CASE 3 Retry 0
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



def test_settings_invalid_type():
    invalid_api_name = 123
    with pytest.raises(ValidationError):
        Settings(API_NAME=invalid_api_name)

---------------
2025-04-17 14:54:19,713 - INFO - TEST CASE 3 Retry 0 - Result - Failed
2025-04-17 14:54:19,713 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
_________________________ test_settings_invalid_type __________________________
temp\temp.py:9: in test_settings_invalid_type
    with pytest.raises(ValidationError):
E   NameError: name 'ValidationError' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_settings_invalid_type - NameError: name 'Validation...
1 failed in 0.50s
2025-04-17 14:54:22,229 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 14:54:22,229 - INFO - 
TEST CASE 3 Retry 1
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



import pytest
from pydantic import ValidationError
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    API_NAME: str = "project_simulation_fastapi"
    API_V1_STR: str = "/api/v1"
    LOGGER_CONFIG_PATH: str = "../conf/base/logging.yml"

def test_settings_invalid_type():
    invalid_api_name = 123
    with pytest.raises(ValidationError):
        Settings(API_NAME=invalid_api_name)

---------------
2025-04-17 14:54:23,834 - INFO - TEST CASE 3 Retry 1 - Result - Passed
2025-04-17 14:54:23,835 - INFO - 
TEST CASE 4 Retry 0
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



def test_settings_none_values():
    none_api_name = None
    none_api_v1_str = None
    none_logger_config_path = None
    with pytest.raises(ValidationError):
        Settings(API_NAME=none_api_name, API_V1_STR=none_api_v1_str, LOGGER_CONFIG_PATH=none_logger_config_path)

---------------
2025-04-17 14:54:25,485 - INFO - TEST CASE 4 Retry 0 - Result - Failed
2025-04-17 14:54:25,485 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
__________________________ test_settings_none_values __________________________
temp\temp.py:11: in test_settings_none_values
    with pytest.raises(ValidationError):
E   NameError: name 'ValidationError' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_settings_none_values - NameError: name 'ValidationE...
1 failed in 0.37s
2025-04-17 14:54:27,180 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 14:54:27,180 - INFO - 
TEST CASE 4 Retry 1
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



import pytest
from pydantic import ValidationError
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    API_NAME: str = "project_simulation_fastapi"
    API_V1_STR: str = "/api/v1"
    LOGGER_CONFIG_PATH: str = "../conf/base/logging.yml"

def test_settings_none_values():
    none_api_name = None
    none_api_v1_str = None
    none_logger_config_path = None
    with pytest.raises(ValidationError):
        Settings(API_NAME=none_api_name, API_V1_STR=none_api_v1_str, LOGGER_CONFIG_PATH=none_logger_config_path)

---------------
2025-04-17 14:54:28,524 - INFO - TEST CASE 4 Retry 1 - Result - Passed
2025-04-17 14:54:28,524 - INFO - 
TEST CASE 5 Retry 0
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



def test_settings_large_input():
    large_api_name = "a" * 1000
    settings = Settings(API_NAME=large_api_name)
    assert settings.API_NAME == large_api_name

---------------
2025-04-17 14:54:30,142 - INFO - TEST CASE 5 Retry 0 - Result - Passed
2025-04-17 14:54:30,143 - INFO - 
TEST CASE 6 Retry 0
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



def test_settings_mock_environment_variables():
    mock_env = {
        "API_NAME": "env_api_name",
        "API_V1_STR": "/env/v1",
        "LOGGER_CONFIG_PATH": "/env/path/logging.yml"
    }
    with patch.dict('os.environ', mock_env):
        settings = Settings()
        assert settings.API_NAME == mock_env["API_NAME"]
        assert settings.API_V1_STR == mock_env["API_V1_STR"]
        assert settings.LOGGER_CONFIG_PATH == mock_env["LOGGER_CONFIG_PATH"]

---------------
2025-04-17 14:54:31,413 - INFO - TEST CASE 6 Retry 0 - Result - Failed
2025-04-17 14:54:31,413 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
__________________ test_settings_mock_environment_variables ___________________
temp\temp.py:13: in test_settings_mock_environment_variables
    with patch.dict('os.environ', mock_env):
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_settings_mock_environment_variables - NameError: na...
1 failed in 0.32s
2025-04-17 14:54:34,908 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 14:54:34,909 - INFO - 
TEST CASE 6 Retry 1
---------------
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest



from unittest.mock import patch

def test_settings_mock_environment_variables():
    mock_env = {
        "API_NAME": "env_api_name",
        "API_V1_STR": "/env/v1",
        "LOGGER_CONFIG_PATH": "/env/path/logging.yml"
    }
    with patch.dict('os.environ', mock_env):
        settings = Settings()
        assert settings.API_NAME == mock_env["API_NAME"]
        assert settings.API_V1_STR == mock_env["API_V1_STR"]
        assert settings.LOGGER_CONFIG_PATH == mock_env["LOGGER_CONFIG_PATH"]

---------------
2025-04-17 14:54:36,431 - INFO - TEST CASE 6 Retry 1 - Result - Passed
2025-04-17 14:54:36,431 - INFO - Before Improvement
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


def test_settings_default_values():
    expected_api_name = "project_simulation_fastapi"
    expected_api_v1_str = "/api/v1"
    expected_logger_config_path = "../conf/base/logging.yml"
    settings = Settings()
    assert settings.API_NAME == expected_api_name
    assert settings.API_V1_STR == expected_api_v1_str
    assert settings.LOGGER_CONFIG_PATH == expected_logger_config_path

def test_settings_custom_values():
    custom_api_name = "custom_api"
    custom_api_v1_str = "/custom/v1"
    custom_logger_config_path = "/custom/path/logging.yml"
    settings = Settings(API_NAME=custom_api_name, API_V1_STR=custom_api_v1_str, LOGGER_CONFIG_PATH=custom_logger_config_path)
    assert settings.API_NAME == custom_api_name
    assert settings.API_V1_STR == custom_api_v1_str
    assert settings.LOGGER_CONFIG_PATH == custom_logger_config_path

import pytest
from pydantic import ValidationError
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    API_NAME: str = "project_simulation_fastapi"
    API_V1_STR: str = "/api/v1"
    LOGGER_CONFIG_PATH: str = "../conf/base/logging.yml"

def test_settings_invalid_type():
    invalid_api_name = 123
    with pytest.raises(ValidationError):
        Settings(API_NAME=invalid_api_name)

import pytest
from pydantic import ValidationError
from pydantic_settings import BaseSettings

class Settings(BaseSettings):
    API_NAME: str = "project_simulation_fastapi"
    API_V1_STR: str = "/api/v1"
    LOGGER_CONFIG_PATH: str = "../conf/base/logging.yml"

def test_settings_none_values():
    none_api_name = None
    none_api_v1_str = None
    none_logger_config_path = None
    with pytest.raises(ValidationError):
        Settings(API_NAME=none_api_name, API_V1_STR=none_api_v1_str, LOGGER_CONFIG_PATH=none_logger_config_path)

def test_settings_large_input():
    large_api_name = "a" * 1000
    settings = Settings(API_NAME=large_api_name)
    assert settings.API_NAME == large_api_name

from unittest.mock import patch

def test_settings_mock_environment_variables():
    mock_env = {
        "API_NAME": "env_api_name",
        "API_V1_STR": "/env/v1",
        "LOGGER_CONFIG_PATH": "/env/path/logging.yml"
    }
    with patch.dict('os.environ', mock_env):
        settings = Settings()
        assert settings.API_NAME == mock_env["API_NAME"]
        assert settings.API_V1_STR == mock_env["API_V1_STR"]
        assert settings.LOGGER_CONFIG_PATH == mock_env["LOGGER_CONFIG_PATH"]

2025-04-17 14:54:41,849 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 14:54:41,850 - INFO - After Improvement
from theory_evaluation.config import Settings
import pytest
from pydantic import ValidationError
from unittest.mock import patch

def test_settings_default_values():
    expected_api_name = "project_simulation_fastapi"
    expected_api_v1_str = "/api/v1"
    expected_logger_config_path = "../conf/base/logging.yml"
    settings = Settings()
    assert settings.API_NAME == expected_api_name
    assert settings.API_V1_STR == expected_api_v1_str
    assert settings.LOGGER_CONFIG_PATH == expected_logger_config_path

def test_settings_custom_values():
    custom_api_name = "custom_api"
    custom_api_v1_str = "/custom/v1"
    custom_logger_config_path = "/custom/path/logging.yml"
    settings = Settings(API_NAME=custom_api_name, API_V1_STR=custom_api_v1_str, LOGGER_CONFIG_PATH=custom_logger_config_path)
    assert settings.API_NAME == custom_api_name
    assert settings.API_V1_STR == custom_api_v1_str
    assert settings.LOGGER_CONFIG_PATH == custom_logger_config_path

def test_settings_invalid_type():
    invalid_api_name = 123
    with pytest.raises(ValidationError):
        Settings(API_NAME=invalid_api_name)

def test_settings_none_values():
    none_api_name = None
    none_api_v1_str = None
    none_logger_config_path = None
    with pytest.raises(ValidationError):
        Settings(API_NAME=none_api_name, API_V1_STR=none_api_v1_str, LOGGER_CONFIG_PATH=none_logger_config_path)

def test_settings_large_input():
    large_api_name = "a" * 1000
    settings = Settings(API_NAME=large_api_name)
    assert settings.API_NAME == large_api_name

def test_settings_mock_environment_variables():
    mock_env = {
        "API_NAME": "env_api_name",
        "API_V1_STR": "/env/v1",
        "LOGGER_CONFIG_PATH": "/env/path/logging.yml"
    }
    with patch.dict('os.environ', mock_env):
        settings = Settings()
        assert settings.API_NAME == mock_env["API_NAME"]
        assert settings.API_V1_STR == mock_env["API_V1_STR"]
        assert settings.LOGGER_CONFIG_PATH == mock_env["LOGGER_CONFIG_PATH"]
2025-04-17 14:54:43,365 - INFO - Improvement of test cases processed successfully
2025-04-17 14:54:43,366 - INFO - run_each_pytest_function_individually complete
2025-04-17 14:54:43,366 - INFO - End Processing file: theory_evaluation\config.py

2025-04-17 14:54:43,367 - INFO - 
Start Processing file: theory_evaluation\llm_utils.py
2025-04-17 14:54:43,368 - INFO - Extraction of function and class start
2025-04-17 14:54:43,369 - INFO - extraction of function and class complete
2025-04-17 14:54:43,370 - INFO - Generate Unit Test Case starts
2025-04-17 14:54:43,370 - INFO - Extract unique import start
2025-04-17 14:54:43,942 - INFO - Extract unique import complete
2025-04-17 14:54:43,942 - INFO - Update relative import start
2025-04-17 14:54:43,942 - INFO - Update relative import complete
2025-04-17 14:54:51,930 - INFO - Generate Unit Test Case complete
2025-04-17 14:54:51,935 - INFO - run_each_pytest_function_individually start
2025-04-17 14:55:01,142 - INFO - Number of test case to process - 5
2025-04-17 14:55:01,142 - INFO - 
TEST CASE 1 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_returns_correct_prompt_structure():
    agent = "test_agent"
    config_path = "./theory_evaluation/evaluator/prompts"
    config_values = {"name": "TestAgent", "version": "1.0"}
    prompt_structure = "Hello, {$name}. Version: {$version}."
    expected_prompt = "Hello, TestAgent. Version: 1.0."

---------------
2025-04-17 14:55:02,110 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 14:55:02,111 - INFO - 
TEST CASE 2 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_raises_exception_for_missing_config_path():
    agent = "test_agent"
    config_path = None

---------------
2025-04-17 14:55:03,096 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 14:55:03,096 - INFO - 
TEST CASE 3 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_handles_missing_placeholder():
    agent = "test_agent"
    config_values = {"name": "TestAgent"}
    prompt_structure = "Hello, {$name}. Version: {$version}."
    expected_prompt = "Hello, TestAgent. Version: {$version}."

---------------
2025-04-17 14:55:04,158 - INFO - TEST CASE 3 Retry 0 - Result - Passed
2025-04-17 14:55:04,158 - INFO - 
TEST CASE 4 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_settings_returns_correct_settings():
    agent = "test_agent"
    config_path = "./theory_evaluation/evaluator/prompts"
    settings = {"setting1": "value1", "setting2": "value2"}

---------------
2025-04-17 14:55:05,143 - INFO - TEST CASE 4 Retry 0 - Result - Passed
2025-04-17 14:55:05,143 - INFO - 
TEST CASE 5 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_settings_raises_exception_for_missing_config_path():
    agent = "test_agent"
    config_path = None

---------------
2025-04-17 14:55:06,034 - INFO - TEST CASE 5 Retry 0 - Result - Passed
2025-04-17 14:55:06,035 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_returns_correct_prompt_structure():
    agent = "test_agent"
    config_path = "./theory_evaluation/evaluator/prompts"
    config_values = {"name": "TestAgent", "version": "1.0"}
    prompt_structure = "Hello, {$name}. Version: {$version}."
    expected_prompt = "Hello, TestAgent. Version: 1.0."

def test_initialise_prompt_raises_exception_for_missing_config_path():
    agent = "test_agent"
    config_path = None

def test_initialise_prompt_handles_missing_placeholder():
    agent = "test_agent"
    config_values = {"name": "TestAgent"}
    prompt_structure = "Hello, {$name}. Version: {$version}."
    expected_prompt = "Hello, TestAgent. Version: {$version}."

def test_initialise_settings_returns_correct_settings():
    agent = "test_agent"
    config_path = "./theory_evaluation/evaluator/prompts"
    settings = {"setting1": "value1", "setting2": "value2"}

def test_initialise_settings_raises_exception_for_missing_config_path():
    agent = "test_agent"
    config_path = None

2025-04-17 14:55:12,306 - INFO - After Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_returns_correct_prompt_structure():
    agent = "test_agent"
    config_path = "./theory_evaluation/evaluator/prompts"
    config_values = {"name": "TestAgent", "version": "1.0"}
    prompt_structure = "Hello, {$name}. Version: {$version}."
    expected_prompt = "Hello, TestAgent. Version: 1.0."

def test_initialise_prompt_raises_exception_for_missing_config_path():
    agent = "test_agent"
    config_path = None

def test_initialise_prompt_handles_missing_placeholder():
    agent = "test_agent"
    config_values = {"name": "TestAgent"}
    prompt_structure = "Hello, {$name}. Version: {$version}."
    expected_prompt = "Hello, TestAgent. Version: {$version}."

def test_initialise_settings_returns_correct_settings():
    agent = "test_agent"
    config_path = "./theory_evaluation/evaluator/prompts"
    settings = {"setting1": "value1", "setting2": "value2"}

def test_initialise_settings_raises_exception_for_missing_config_path():
    agent = "test_agent"
    config_path = None
2025-04-17 14:55:13,421 - INFO - Improvement of test cases processed successfully
2025-04-17 14:55:13,422 - INFO - run_each_pytest_function_individually complete
2025-04-17 14:55:13,422 - INFO - End Processing file: theory_evaluation\llm_utils.py

2025-04-17 14:55:13,430 - INFO -                             filename  ...  percentage_passed (%)
1  theory_evaluation\circle_utils.py  ...                  100.0
2        theory_evaluation\config.py  ...                  100.0
3     theory_evaluation\llm_utils.py  ...                  100.0

[3 rows x 4 columns]
2025-04-17 14:55:13,470 - INFO - 
+----+-----------------------------------+---------------------------+--------------------+-------------------------+
|    | filename                          |   total_test_cases_passed |   total_test_cases |   percentage_passed (%) |
+====+===================================+===========================+====================+=========================+
|  1 | theory_evaluation\circle_utils.py |                         6 |                  6 |                     100 |
+----+-----------------------------------+---------------------------+--------------------+-------------------------+
|  2 | theory_evaluation\config.py       |                         6 |                  6 |                     100 |
+----+-----------------------------------+---------------------------+--------------------+-------------------------+
|  3 | theory_evaluation\llm_utils.py    |                         5 |                  5 |                     100 |
+----+-----------------------------------+---------------------------+--------------------+-------------------------+
