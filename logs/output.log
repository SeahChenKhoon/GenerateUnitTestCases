2025-04-16 10:47:34,646 - INFO - Loading environment variables start
2025-04-16 10:47:34,649 - INFO - Loading environment variables completes
2025-04-16 10:47:34,649 - INFO - Initialising of LLM start
2025-04-16 10:47:34,955 - INFO - Initialising of LLM completes
2025-04-16 10:47:34,955 - INFO - Getting python file starts
2025-04-16 10:47:34,956 - INFO - Getting python file completes
2025-04-16 10:47:34,956 - INFO - 
Start Processing file: theory_evaluation\llm_handler.py
2025-04-16 10:47:34,956 - INFO - Extraction of function and class start
2025-04-16 10:47:34,957 - INFO - extraction of function and class complete
2025-04-16 10:47:34,957 - INFO - Generate Unit Test Case starts
2025-04-16 10:47:34,957 - INFO - Extract unique import start
2025-04-16 10:47:36,861 - INFO - Extract unique import complete
2025-04-16 10:47:36,861 - INFO - Update relative import start
2025-04-16 10:47:36,863 - INFO - Update relative import complete
2025-04-16 10:47:46,099 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 10:47:46,100 - INFO - Generate Unit Test Case complete
2025-04-16 10:47:46,105 - INFO - run_each_pytest_function_individually start
2025-04-16 10:47:56,108 - INFO - Number of test case to process - 6
2025-04-16 10:47:56,109 - INFO - 

2025-04-16 10:47:56,109 - INFO - TEST CASE 1 Retry 0
2025-04-16 10:47:56,109 - INFO - ---------------
2025-04-16 10:47:56,110 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

@pytest.mark.asyncio
async def test_openai_llm_initialization():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure_openai, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai, \
         patch('theory_evaluation.llm_handler.os.getenv', return_value='mock_value'):

2025-04-16 10:47:56,110 - INFO - ---------------
2025-04-16 10:47:57,150 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 10:47:57,150 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
.venv\Lib\site-packages\_pytest\python.py:493: in importtestmodule
    mod = import_path(
.venv\Lib\site-packages\_pytest\pathlib.py:587: in import_path
    importlib.import_module(module_name)
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1387: in _gcd_import
    ???
<frozen importlib._bootstrap>:1360: in _find_and_load
    ???
<frozen importlib._bootstrap>:1331: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:935: in _load_unlocked
    ???
.venv\Lib\site-packages\_pytest\assertion\rewrite.py:176: in exec_module
    source_stat, co = _rewrite_test(fn, self.config)
.venv\Lib\site-packages\_pytest\assertion\rewrite.py:356: in _rewrite_test
    tree = ast.parse(source, filename=strfn)
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\ast.py:54: in parse
    return compile(source, filename, mode, flags,
E     File "C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py", line 17
E       patch('theory_evaluation.llm_handler.os.getenv', return_value='mock_value'):
E                                                                                   ^
E   IndentationError: expected an indented block after 'with' statement on line 15
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.28s
2025-04-16 10:47:58,566 - INFO - TEST CASE 1 Retry 1
2025-04-16 10:47:58,566 - INFO - ---------------
2025-04-16 10:47:58,566 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
from unittest.mock import patch

@pytest.mark.asyncio
async def test_openai_llm_initialization():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure_openai, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai, \
         patch('theory_evaluation.llm_handler.os.getenv', return_value='mock_value'):
        pass

2025-04-16 10:47:58,566 - INFO - ---------------
2025-04-16 10:48:00,469 - INFO - Consolidate import statements - You are a code assistant.

Given the following test case 
```
from unittest.mock import patch

@pytest.mark.asyncio
async def test_openai_llm_initialization():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure_openai, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai, \
         patch('theory_evaluation.llm_handler.os.getenv', return_value='mock_value'):
        pass
```
, coupled with existing import statements as follows
```
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
```
, provide all unique import statements. Do not return any explanation or duplicates of existing imports. --- Unit Test: 
```python
from unittest.mock import patch

@pytest.mark.asyncio
async def test_openai_llm_initialization():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure_openai, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai, \
         patch('theory_evaluation.llm_handler.os.getenv', return_value='mock_value'):
        pass
```

Existing imports: 
```pythonimport asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
```
2025-04-16 10:48:01,158 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 10:48:01,159 - INFO - New import Statements 2 - 

from unittest.mock import patch
2025-04-16 10:48:01,159 - INFO - TEST CASE 1 Retry 1 - Result - Passed
2025-04-16 10:48:01,159 - INFO - Test Case 1 processed successfully
2025-04-16 10:48:01,160 - INFO - 

2025-04-16 10:48:01,160 - INFO - TEST CASE 2 Retry 0
2025-04-16 10:48:01,160 - INFO - ---------------
2025-04-16 10:48:01,160 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

@pytest.mark.asyncio
async def test_openai_json_completion():
    mock_response = MagicMock()
    mock_response.choices = [MagicMock()]
    mock_response.choices[0].message.content = json.dumps({"key": "value"})

2025-04-16 10:48:01,160 - INFO - ---------------
2025-04-16 10:48:02,037 - INFO - TEST CASE 2 Retry 0 - Result - Failed
2025-04-16 10:48:02,037 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.21s
2025-04-16 10:48:04,308 - INFO - TEST CASE 2 Retry 1
2025-04-16 10:48:04,308 - INFO - ---------------
2025-04-16 10:48:04,309 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
import pytest
from unittest.mock import MagicMock

@pytest.mark.asyncio
async def test_openai_json_completion():
    mock_response = MagicMock()
    mock_response.choices = [MagicMock()]
    mock_response.choices[0].message.content = json.dumps({"key": "value"})
    with patch('openai.OpenAI.chat.completions.create', return_value=mock_response):
        llm = OpenAI_llm(output="json")
        result = await llm._OpenAI_JSON_Completion()
        assert result == {"key": "value"}

2025-04-16 10:48:04,309 - INFO - ---------------
2025-04-16 10:48:05,290 - INFO - TEST CASE 2 Retry 1 - Result - Failed
2025-04-16 10:48:05,290 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.22s
2025-04-16 10:48:05,290 - INFO - Failed after all retries for test case 2
2025-04-16 10:48:05,721 - INFO - TEST CASE 2 Retry 2
2025-04-16 10:48:05,721 - INFO - ---------------
2025-04-16 10:48:05,722 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
import json

2025-04-16 10:48:05,722 - INFO - ---------------
2025-04-16 10:48:06,633 - INFO - TEST CASE 2 Retry 2 - Result - Failed
2025-04-16 10:48:06,634 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.20s
2025-04-16 10:48:06,634 - INFO - Failed after all retries for test case 2
2025-04-16 10:48:06,634 - INFO - 

2025-04-16 10:48:06,635 - INFO - TEST CASE 3 Retry 0
2025-04-16 10:48:06,635 - INFO - ---------------
2025-04-16 10:48:06,635 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

@pytest.mark.asyncio
async def test_openai_streaming():
    mock_chunk = MagicMock()
    mock_chunk.choices = [MagicMock()]
    mock_chunk.choices[0].delta.content = "streamed content"

2025-04-16 10:48:06,635 - INFO - ---------------
2025-04-16 10:48:07,420 - INFO - TEST CASE 3 Retry 0 - Result - Failed
2025-04-16 10:48:07,421 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.18s
2025-04-16 10:48:08,016 - INFO - TEST CASE 3 Retry 1
2025-04-16 10:48:08,016 - INFO - ---------------
2025-04-16 10:48:08,016 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
from unittest.mock import patch, MagicMock
import pytest

2025-04-16 10:48:08,017 - INFO - ---------------
2025-04-16 10:48:08,902 - INFO - TEST CASE 3 Retry 1 - Result - Failed
2025-04-16 10:48:08,902 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.26s
2025-04-16 10:48:08,902 - INFO - Failed after all retries for test case 3
2025-04-16 10:48:10,663 - INFO - TEST CASE 3 Retry 2
2025-04-16 10:48:10,664 - INFO - ---------------
2025-04-16 10:48:10,664 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
import asyncio

@pytest.fixture
async def mock_openai_llm():
    with patch("llm_handler.OpenAI_llm") as MockOpenAI_llm:
        instance = MockOpenAI_llm.return_value
        instance.execute.return_value = asyncio.coroutine(lambda: iter(["mocked response"]))
        yield instance

def test_openai_llm(mock_openai_llm):
    async def run_test():
        async for response in mock_openai_llm.execute():
            assert response == "mocked response"
    asyncio.run(run_test())

2025-04-16 10:48:10,664 - INFO - ---------------
2025-04-16 10:48:11,415 - INFO - TEST CASE 3 Retry 2 - Result - Failed
2025-04-16 10:48:11,415 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.18s
2025-04-16 10:48:11,415 - INFO - Failed after all retries for test case 3
2025-04-16 10:48:11,415 - INFO - 

2025-04-16 10:48:11,415 - INFO - TEST CASE 4 Retry 0
2025-04-16 10:48:11,415 - INFO - ---------------
2025-04-16 10:48:11,415 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

@pytest.mark.asyncio
async def test_openai_chat_completion():
    mock_response = MagicMock()
    mock_response.choices = [MagicMock()]
    mock_response.choices[0].message.content = "chat content"

2025-04-16 10:48:11,416 - INFO - ---------------
2025-04-16 10:48:12,135 - INFO - TEST CASE 4 Retry 0 - Result - Failed
2025-04-16 10:48:12,136 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.17s
2025-04-16 10:48:12,712 - INFO - TEST CASE 4 Retry 1
2025-04-16 10:48:12,712 - INFO - ---------------
2025-04-16 10:48:12,712 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
from unittest.mock import MagicMock
import pytest

2025-04-16 10:48:12,713 - INFO - ---------------
2025-04-16 10:48:13,607 - INFO - TEST CASE 4 Retry 1 - Result - Failed
2025-04-16 10:48:13,607 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.20s
2025-04-16 10:48:13,607 - INFO - Failed after all retries for test case 4
2025-04-16 10:48:14,281 - INFO - TEST CASE 4 Retry 2
2025-04-16 10:48:14,281 - INFO - ---------------
2025-04-16 10:48:14,282 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
import pytest_asyncio

2025-04-16 10:48:14,282 - INFO - ---------------
2025-04-16 10:48:15,105 - INFO - TEST CASE 4 Retry 2 - Result - Failed
2025-04-16 10:48:15,105 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.13s
2025-04-16 10:48:15,106 - INFO - Failed after all retries for test case 4
2025-04-16 10:48:15,106 - INFO - 

2025-04-16 10:48:15,106 - INFO - TEST CASE 5 Retry 0
2025-04-16 10:48:15,106 - INFO - ---------------
2025-04-16 10:48:15,106 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

@pytest.mark.asyncio
async def test_execute_text_generation():
    mock_response = MagicMock()
    mock_response.choices = [MagicMock()]
    mock_response.choices[0].message.content = "generated text"

2025-04-16 10:48:15,106 - INFO - ---------------
2025-04-16 10:48:15,833 - INFO - TEST CASE 5 Retry 0 - Result - Failed
2025-04-16 10:48:15,833 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.25s
2025-04-16 10:48:17,922 - INFO - TEST CASE 5 Retry 1
2025-04-16 10:48:17,922 - INFO - ---------------
2025-04-16 10:48:17,923 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
import pytest
from unittest.mock import MagicMock

@pytest.mark.asyncio
async def test_execute_text_generation():
    mock_response = MagicMock()
    mock_response.choices = [MagicMock()]
    mock_response.choices[0].message.content = "generated text"
    with patch('openai.OpenAI.chat.completions.create', return_value=mock_response):
        llm = OpenAI_llm(message="Test message", useAzureOpenAI=False, output=None)
        async for response in llm.execute():
            assert response == "generated text"

2025-04-16 10:48:17,923 - INFO - ---------------
2025-04-16 10:48:18,954 - INFO - TEST CASE 5 Retry 1 - Result - Failed
2025-04-16 10:48:18,954 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.23s
2025-04-16 10:48:18,954 - INFO - Failed after all retries for test case 5
2025-04-16 10:48:19,516 - INFO - TEST CASE 5 Retry 2
2025-04-16 10:48:19,516 - INFO - ---------------
2025-04-16 10:48:19,517 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
from unittest.mock import patch

2025-04-16 10:48:19,517 - INFO - ---------------
2025-04-16 10:48:20,414 - INFO - TEST CASE 5 Retry 2 - Result - Failed
2025-04-16 10:48:20,414 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.21s
2025-04-16 10:48:20,414 - INFO - Failed after all retries for test case 5
2025-04-16 10:48:20,414 - INFO - 

2025-04-16 10:48:20,414 - INFO - TEST CASE 6 Retry 0
2025-04-16 10:48:20,414 - INFO - ---------------
2025-04-16 10:48:20,414 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

@pytest.mark.asyncio
async def test_execute_vision():
    mock_response = MagicMock()
    mock_response.choices = [MagicMock()]
    mock_response.choices[0].message.content = "vision content"

2025-04-16 10:48:20,414 - INFO - ---------------
2025-04-16 10:48:21,106 - INFO - TEST CASE 6 Retry 0 - Result - Failed
2025-04-16 10:48:21,106 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.18s
2025-04-16 10:48:21,706 - INFO - TEST CASE 6 Retry 1
2025-04-16 10:48:21,706 - INFO - ---------------
2025-04-16 10:48:21,706 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
from unittest.mock import MagicMock
import pytest

2025-04-16 10:48:21,707 - INFO - ---------------
2025-04-16 10:48:22,406 - INFO - TEST CASE 6 Retry 1 - Result - Failed
2025-04-16 10:48:22,406 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.11s
2025-04-16 10:48:22,406 - INFO - Failed after all retries for test case 6
2025-04-16 10:48:24,279 - INFO - TEST CASE 6 Retry 2
2025-04-16 10:48:24,280 - INFO - ---------------
2025-04-16 10:48:24,280 - INFO - 

from unittest.mock import patch
@pytest.fixture
def mock_openai_llm():
    with patch('theory_evaluation.llm_handler.OpenAI_llm.client', new_callable=MagicMock) as mock_client:
        yield mock_client

# New Test Case
from openai import OpenAI
from unittest.mock import patch

@pytest.mark.asyncio
async def test_execute():
    with patch.object(OpenAI, 'chat') as mock_chat:
        mock_chat.completions.create.return_value = MagicMock(choices=[MagicMock(message=MagicMock(content='{"answer": "7", "explanation": "2+5 equals 7."}'))])
        llm = OpenAI_llm(message="You are a AI teacher in math.", useAzureOpenAI=False, output="json")
        responses = []
        async for response in llm.execute():
            responses.append(response)
        assert responses == [{"answer": "7", "explanation": "2+5 equals 7."}]

2025-04-16 10:48:24,280 - INFO - ---------------
2025-04-16 10:48:25,457 - INFO - TEST CASE 6 Retry 2 - Result - Failed
2025-04-16 10:48:25,457 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
temp\temp.py:3: in <module>
    @pytest.fixture
E   NameError: name 'pytest' is not defined
=========================== short test summary info ===========================
ERROR temp/temp.py - NameError: name 'pytest' is not defined
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 error in 0.25s
2025-04-16 10:48:25,457 - INFO - Failed after all retries for test case 6
2025-04-16 10:48:25,457 - INFO - run_each_pytest_function_individually complete
2025-04-16 10:48:25,457 - INFO - End Processing file: theory_evaluation\llm_handler.py

2025-04-16 10:48:25,458 - INFO - 
Start Processing file: theory_evaluation\__init__.py
2025-04-16 10:48:25,458 - INFO - Extraction of function and class start
2025-04-16 10:48:25,458 - INFO - extraction of function and class complete
2025-04-16 10:48:25,458 - WARNING - No public functions found in theory_evaluation\__init__.py. Skipping test generation.

