2025-04-16 15:39:59,094 - INFO - Loading environment variables start
2025-04-16 15:39:59,108 - INFO - Loading environment variables completes
2025-04-16 15:39:59,109 - INFO - Initialising of LLM start
2025-04-16 15:39:59,506 - INFO - Initialising of LLM completes
2025-04-16 15:39:59,507 - INFO - Getting python file starts
2025-04-16 15:39:59,508 - INFO - Getting python file completes
2025-04-16 15:39:59,508 - INFO - 
Start Processing file: theory_evaluation\llm_utils.py
2025-04-16 15:39:59,508 - INFO - Extraction of function and class start
2025-04-16 15:39:59,509 - INFO - extraction of function and class complete
2025-04-16 15:39:59,509 - INFO - Generate Unit Test Case starts
2025-04-16 15:39:59,509 - INFO - Extract unique import start
2025-04-16 15:40:01,354 - INFO - Extract unique import complete
2025-04-16 15:40:01,355 - INFO - Update relative import start
2025-04-16 15:40:01,355 - INFO - Update relative import complete
2025-04-16 15:40:08,786 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:40:08,787 - INFO - Generate Unit Test Case complete
2025-04-16 15:40:08,792 - INFO - run_each_pytest_function_individually start
2025-04-16 15:40:15,290 - INFO - Number of test case to process - 2
2025-04-16 15:40:15,290 - INFO - 

2025-04-16 15:40:15,290 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:15,290 - INFO - ---------------
2025-04-16 15:40:15,291 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:15,291 - INFO - ---------------
2025-04-16 15:40:16,004 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:16,004 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.09s
2025-04-16 15:40:16,005 - INFO - 

2025-04-16 15:40:16,005 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:16,005 - INFO - ---------------
2025-04-16 15:40:16,005 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:16,005 - INFO - ---------------
2025-04-16 15:40:16,728 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:16,728 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:16,728 - INFO - 

2025-04-16 15:40:16,728 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:16,728 - INFO - ---------------
2025-04-16 15:40:16,728 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:16,728 - INFO - ---------------
2025-04-16 15:40:17,453 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:17,453 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:17,454 - INFO - 

2025-04-16 15:40:17,454 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:17,454 - INFO - ---------------
2025-04-16 15:40:17,454 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:17,454 - INFO - ---------------
2025-04-16 15:40:18,234 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:18,234 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:18,234 - INFO - 

2025-04-16 15:40:18,234 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:18,234 - INFO - ---------------
2025-04-16 15:40:18,234 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:18,234 - INFO - ---------------
2025-04-16 15:40:18,870 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:18,870 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:18,870 - INFO - 

2025-04-16 15:40:18,870 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:18,870 - INFO - ---------------
2025-04-16 15:40:18,870 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:18,870 - INFO - ---------------
2025-04-16 15:40:19,735 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:19,735 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.18s
2025-04-16 15:40:19,736 - INFO - 

2025-04-16 15:40:19,736 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:19,736 - INFO - ---------------
2025-04-16 15:40:19,736 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:19,736 - INFO - ---------------
2025-04-16 15:40:20,782 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:20,783 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.17s
2025-04-16 15:40:20,783 - INFO - 

2025-04-16 15:40:20,783 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:20,783 - INFO - ---------------
2025-04-16 15:40:20,783 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:20,783 - INFO - ---------------
2025-04-16 15:40:21,821 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:21,821 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.12s
2025-04-16 15:40:21,822 - INFO - 

2025-04-16 15:40:21,822 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:21,822 - INFO - ---------------
2025-04-16 15:40:21,822 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:21,822 - INFO - ---------------
2025-04-16 15:40:22,866 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:22,866 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.13s
2025-04-16 15:40:22,866 - INFO - 

2025-04-16 15:40:22,866 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:22,866 - INFO - ---------------
2025-04-16 15:40:22,866 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:22,866 - INFO - ---------------
2025-04-16 15:40:23,738 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:23,738 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:23,739 - INFO - 

2025-04-16 15:40:23,739 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:23,739 - INFO - ---------------
2025-04-16 15:40:23,740 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:23,740 - INFO - ---------------
2025-04-16 15:40:24,427 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:24,427 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:24,427 - INFO - 

2025-04-16 15:40:24,427 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:24,427 - INFO - ---------------
2025-04-16 15:40:24,427 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:24,428 - INFO - ---------------
2025-04-16 15:40:25,090 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:25,090 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.09s
2025-04-16 15:40:25,090 - INFO - 

2025-04-16 15:40:25,090 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:25,090 - INFO - ---------------
2025-04-16 15:40:25,090 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:25,090 - INFO - ---------------
2025-04-16 15:40:25,744 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:25,744 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:25,745 - INFO - 

2025-04-16 15:40:25,745 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:25,745 - INFO - ---------------
2025-04-16 15:40:25,745 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:25,745 - INFO - ---------------
2025-04-16 15:40:26,482 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:26,482 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.13s
2025-04-16 15:40:26,482 - INFO - 

2025-04-16 15:40:26,482 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:26,482 - INFO - ---------------
2025-04-16 15:40:26,482 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:26,482 - INFO - ---------------
2025-04-16 15:40:27,130 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:27,130 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:27,130 - INFO - 

2025-04-16 15:40:27,130 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:27,130 - INFO - ---------------
2025-04-16 15:40:27,130 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:27,130 - INFO - ---------------
2025-04-16 15:40:27,813 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:27,813 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:27,813 - INFO - 

2025-04-16 15:40:27,814 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:27,814 - INFO - ---------------
2025-04-16 15:40:27,814 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:27,814 - INFO - ---------------
2025-04-16 15:40:28,396 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:28,396 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.09s
2025-04-16 15:40:28,396 - INFO - 

2025-04-16 15:40:28,396 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:28,396 - INFO - ---------------
2025-04-16 15:40:28,396 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:28,396 - INFO - ---------------
2025-04-16 15:40:29,062 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:29,062 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.09s
2025-04-16 15:40:29,063 - INFO - 

2025-04-16 15:40:29,063 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:29,063 - INFO - ---------------
2025-04-16 15:40:29,063 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:29,063 - INFO - ---------------
2025-04-16 15:40:29,772 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:29,772 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:29,772 - INFO - 

2025-04-16 15:40:29,773 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:29,773 - INFO - ---------------
2025-04-16 15:40:29,773 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:29,773 - INFO - ---------------
2025-04-16 15:40:30,667 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:30,667 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:30,668 - INFO - 

2025-04-16 15:40:30,668 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:30,668 - INFO - ---------------
2025-04-16 15:40:30,668 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:30,668 - INFO - ---------------
2025-04-16 15:40:31,436 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:31,436 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.11s
2025-04-16 15:40:31,436 - INFO - 

2025-04-16 15:40:31,436 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:31,436 - INFO - ---------------
2025-04-16 15:40:31,437 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:31,437 - INFO - ---------------
2025-04-16 15:40:32,217 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:32,217 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.18s
2025-04-16 15:40:32,217 - INFO - 

2025-04-16 15:40:32,217 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:32,217 - INFO - ---------------
2025-04-16 15:40:32,217 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:32,217 - INFO - ---------------
2025-04-16 15:40:33,043 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:33,043 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:33,043 - INFO - 

2025-04-16 15:40:33,043 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:33,043 - INFO - ---------------
2025-04-16 15:40:33,043 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:33,043 - INFO - ---------------
2025-04-16 15:40:33,711 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:33,711 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:33,711 - INFO - 

2025-04-16 15:40:33,711 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:33,711 - INFO - ---------------
2025-04-16 15:40:33,711 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:33,711 - INFO - ---------------
2025-04-16 15:40:34,641 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:34,642 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:34,642 - INFO - 

2025-04-16 15:40:34,642 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:34,642 - INFO - ---------------
2025-04-16 15:40:34,642 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:34,642 - INFO - ---------------
2025-04-16 15:40:35,633 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:35,634 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.13s
2025-04-16 15:40:35,634 - INFO - 

2025-04-16 15:40:35,634 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:35,634 - INFO - ---------------
2025-04-16 15:40:35,634 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:35,634 - INFO - ---------------
2025-04-16 15:40:36,353 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:36,353 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:36,353 - INFO - 

2025-04-16 15:40:36,353 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:36,353 - INFO - ---------------
2025-04-16 15:40:36,353 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:36,353 - INFO - ---------------
2025-04-16 15:40:37,226 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:37,226 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.14s
2025-04-16 15:40:37,226 - INFO - 

2025-04-16 15:40:37,226 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:37,226 - INFO - ---------------
2025-04-16 15:40:37,226 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:37,226 - INFO - ---------------
2025-04-16 15:40:37,942 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:37,942 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.09s
2025-04-16 15:40:37,943 - INFO - 

2025-04-16 15:40:37,943 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:37,943 - INFO - ---------------
2025-04-16 15:40:37,943 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:37,943 - INFO - ---------------
2025-04-16 15:40:38,761 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:38,761 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.13s
2025-04-16 15:40:38,761 - INFO - 

2025-04-16 15:40:38,761 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:38,761 - INFO - ---------------
2025-04-16 15:40:38,761 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:38,761 - INFO - ---------------
2025-04-16 15:40:39,310 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:39,310 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.07s
2025-04-16 15:40:39,310 - INFO - 

2025-04-16 15:40:39,310 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:39,310 - INFO - ---------------
2025-04-16 15:40:39,311 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:39,311 - INFO - ---------------
2025-04-16 15:40:40,053 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:40,053 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.09s
2025-04-16 15:40:40,053 - INFO - 

2025-04-16 15:40:40,053 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:40,053 - INFO - ---------------
2025-04-16 15:40:40,053 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:40,053 - INFO - ---------------
2025-04-16 15:40:40,682 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:40,683 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:40,683 - INFO - 

2025-04-16 15:40:40,683 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:40,683 - INFO - ---------------
2025-04-16 15:40:40,683 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:40,683 - INFO - ---------------
2025-04-16 15:40:41,343 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:41,343 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.10s
2025-04-16 15:40:41,343 - INFO - 

2025-04-16 15:40:41,343 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:41,343 - INFO - ---------------
2025-04-16 15:40:41,344 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:41,344 - INFO - ---------------
2025-04-16 15:40:42,012 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:42,012 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.11s
2025-04-16 15:40:42,012 - INFO - 

2025-04-16 15:40:42,012 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:42,013 - INFO - ---------------
2025-04-16 15:40:42,013 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:42,013 - INFO - ---------------
2025-04-16 15:40:42,700 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:42,700 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:42,700 - INFO - 

2025-04-16 15:40:42,700 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:42,700 - INFO - ---------------
2025-04-16 15:40:42,700 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:42,700 - INFO - ---------------
2025-04-16 15:40:43,319 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 15:40:43,319 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________________ test_initialise_prompt ____________________________
temp\temp.py:20: in test_initialise_prompt
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt - NameError: name 'patch' is not ...
1 failed in 0.08s
2025-04-16 15:40:43,319 - INFO - 

2025-04-16 15:40:43,319 - INFO - TEST CASE 1 Retry 0
2025-04-16 15:40:43,319 - INFO - ---------------
2025-04-16 15:40:43,319 - INFO - 
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
@pytest.fixture
def mock_open_files():
    prompt_content = "This is a test prompt with {$placeholder}."
    config_content = "placeholder: value"
    settings_content = "setting_key: setting_value"
    m_open = mock_open(read_data=prompt_content)
    m_open.side_effect = [
        mock_open(read_data=config_content).return_value,
        mock_open(read_data=prompt_content).return_value,
        mock_open(read_data=settings_content).return_value,
    ]
    return m_open

def test_initialise_prompt():
    with patch("theory_evaluation.llm_utils.open", mock_open_files()) as m_open, \
         patch("theory_evaluation.llm_utils.yaml.load", return_value={"placeholder": "value"}):
        result = initialise_prompt("test_agent")
        assert result == "This is a test prompt with value."
        m_open.assert_has_calls([
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/config.yaml"),
            patch("theory_evaluation.llm_utils.open").call(f"./theory_evaluation/evaluator/prompts/test_agent/prompt.txt", "r")
        ])

2025-04-16 15:40:43,319 - INFO - ---------------
