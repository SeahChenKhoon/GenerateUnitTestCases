2025-04-17 11:43:13,488 - INFO - Loading environment variables start
2025-04-17 11:43:13,513 - INFO - Loading environment variables completes
2025-04-17 11:43:13,514 - INFO - Initialising of LLM start
2025-04-17 11:43:16,020 - INFO - Initialising of LLM completes
2025-04-17 11:43:16,021 - INFO - Getting python file starts
2025-04-17 11:43:16,028 - INFO - Getting python file completes
2025-04-17 11:43:16,029 - INFO - 
Start Processing file: theory_evaluation\circle_utils.py
2025-04-17 11:43:16,032 - INFO - Extraction of function and class start
2025-04-17 11:43:16,035 - INFO - extraction of function and class complete
2025-04-17 11:43:16,036 - INFO - Generate Unit Test Case starts
2025-04-17 11:43:16,037 - INFO - Extract unique import start
2025-04-17 11:43:18,209 - INFO - Extract unique import complete
2025-04-17 11:43:18,209 - INFO - Update relative import start
2025-04-17 11:43:18,210 - INFO - Update relative import complete
2025-04-17 11:43:21,438 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 11:43:21,439 - INFO - Generate Unit Test Case complete
2025-04-17 11:43:21,450 - INFO - run_each_pytest_function_individually start
2025-04-17 11:43:25,601 - INFO - Number of test case to process - 6
2025-04-17 11:43:25,603 - INFO - 
TEST CASE 1 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

---------------
2025-04-17 11:43:26,397 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 11:43:26,397 - INFO - 
TEST CASE 2 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

---------------
2025-04-17 11:43:27,127 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 11:43:27,127 - INFO - 
TEST CASE 3 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

---------------
2025-04-17 11:43:27,830 - INFO - TEST CASE 3 Retry 0 - Result - Passed
2025-04-17 11:43:27,831 - INFO - 
TEST CASE 4 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

---------------
2025-04-17 11:43:28,670 - INFO - TEST CASE 4 Retry 0 - Result - Passed
2025-04-17 11:43:28,670 - INFO - 
TEST CASE 5 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_zero_radius():
    radius = 0
    expected_circumference = 0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

---------------
2025-04-17 11:43:29,284 - INFO - TEST CASE 5 Retry 0 - Result - Passed
2025-04-17 11:43:29,285 - INFO - 
TEST CASE 6 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(-1)

---------------
2025-04-17 11:43:30,005 - INFO - TEST CASE 6 Retry 0 - Result - Passed
2025-04-17 11:43:30,006 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0
    expected_circumference = 0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(-1)

2025-04-17 11:43:33,157 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest

def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0
    expected_circumference = 0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(-1)
2025-04-17 11:43:33,949 - INFO - Improvement of test cases processed successfully
2025-04-17 11:43:33,950 - INFO - run_each_pytest_function_individually complete
2025-04-17 11:43:33,951 - INFO - End Processing file: theory_evaluation\circle_utils.py

2025-04-17 11:43:33,951 - INFO - 
Start Processing file: theory_evaluation\llm_handler.py
2025-04-17 11:43:33,954 - INFO - Extraction of function and class start
2025-04-17 11:43:33,955 - INFO - extraction of function and class complete
2025-04-17 11:43:33,956 - INFO - Generate Unit Test Case starts
2025-04-17 11:43:33,956 - INFO - Extract unique import start
2025-04-17 11:43:34,825 - INFO - Extract unique import complete
2025-04-17 11:43:34,826 - INFO - Update relative import start
2025-04-17 11:43:34,827 - INFO - Update relative import complete
2025-04-17 11:43:43,456 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 11:43:43,457 - INFO - Generate Unit Test Case complete
2025-04-17 11:43:43,460 - INFO - run_each_pytest_function_individually start
2025-04-17 11:43:56,001 - INFO - Number of test case to process - 6
2025-04-17 11:43:56,002 - INFO - 
TEST CASE 1 Retry 0
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



@pytest.mark.asyncio
async def test_openai_llm_initialization():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock_azure_openai, \
         patch("theory_evaluation.llm_handler.OpenAI") as mock_openai, \
         patch("theory_evaluation.llm_handler.os.getenv") as mock_getenv:
        
        mock_getenv.side_effect = lambda key: f"{key}_value"

---------------
2025-04-17 11:43:57,992 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-17 11:43:57,992 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
_______________________ test_openai_llm_initialization ________________________
temp\temp.py:13: in test_openai_llm_initialization
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock_azure_openai, \
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_openai_llm_initialization - NameError: name 'patch'...
1 failed in 1.10s
2025-04-17 11:44:00,001 - INFO - 
TEST CASE 1 Retry 1
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



from unittest.mock import patch

@pytest.mark.asyncio
async def test_openai_llm_initialization():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock_azure_openai, \
         patch("theory_evaluation.llm_handler.OpenAI") as mock_openai, \
         patch("theory_evaluation.llm_handler.os.getenv") as mock_getenv:
        
        mock_getenv.side_effect = lambda key: f"{key}_value"

---------------
2025-04-17 11:44:02,251 - INFO - TEST CASE 1 Retry 1 - Result - Passed
2025-04-17 11:44:02,251 - INFO - 
TEST CASE 2 Retry 0
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



@pytest.mark.asyncio
async def test_openai_llm_execute_text_generation():
    with patch("theory_evaluation.llm_handler.OpenAI_llm._run") as mock_run:
        mock_run.return_value.__aiter__.return_value = ["response1", "response2"]

---------------
2025-04-17 11:44:05,095 - INFO - TEST CASE 2 Retry 0 - Result - Failed
2025-04-17 11:44:05,095 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________ test_openai_llm_execute_text_generation ___________________
temp\temp.py:13: in test_openai_llm_execute_text_generation
    with patch("theory_evaluation.llm_handler.OpenAI_llm._run") as mock_run:
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_openai_llm_execute_text_generation - NameError: nam...
1 failed in 1.84s
2025-04-17 11:44:07,603 - INFO - 
TEST CASE 2 Retry 1
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



from unittest.mock import patch

@pytest.mark.asyncio
async def test_openai_llm_execute_text_generation():
    with patch("theory_evaluation.llm_handler.OpenAI_llm._run") as mock_run:
        mock_run.return_value.__aiter__.return_value = ["response1", "response2"]
        llm = OpenAI_llm(message="Test message", useAzureOpenAI=False, output="stream")
        responses = []
        async for response in llm.execute():
            responses.append(response)
        assert responses == ["response1", "response2"]

---------------
2025-04-17 11:44:10,707 - INFO - TEST CASE 2 Retry 1 - Result - Passed
2025-04-17 11:44:10,708 - INFO - 
TEST CASE 3 Retry 0
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



@pytest.mark.asyncio
async def test_openai_llm_execute_vision():
    with patch("theory_evaluation.llm_handler.OpenAI_llm._run") as mock_run:
        mock_run.return_value.__aiter__.return_value = ["response1", "response2"]

---------------
2025-04-17 11:44:12,518 - INFO - TEST CASE 3 Retry 0 - Result - Failed
2025-04-17 11:44:12,518 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
_______________________ test_openai_llm_execute_vision ________________________
temp\temp.py:13: in test_openai_llm_execute_vision
    with patch("theory_evaluation.llm_handler.OpenAI_llm._run") as mock_run:
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_openai_llm_execute_vision - NameError: name 'patch'...
1 failed in 1.05s
2025-04-17 11:44:14,284 - INFO - 
TEST CASE 3 Retry 1
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



from unittest.mock import patch

@pytest.mark.asyncio
async def test_openai_llm_execute_vision():
    with patch("theory_evaluation.llm_handler.OpenAI_llm._run") as mock_run:
        mock_run.return_value.__aiter__.return_value = ["response1", "response2"]
        # Add the rest of your test logic here, if needed.

---------------
2025-04-17 11:44:16,348 - INFO - TEST CASE 3 Retry 1 - Result - Passed
2025-04-17 11:44:16,348 - INFO - 
TEST CASE 4 Retry 0
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



@pytest.mark.asyncio
async def test_openai_llm_openai_json_completion():
    with patch("theory_evaluation.llm_handler.OpenAI_llm.client") as mock_client:
        mock_response = MagicMock()
        mock_response.choices[0].message.content = '{"answer": "42", "explanation": "The answer to life."}'
        mock_client.chat.completions.create.return_value = mock_response

---------------
2025-04-17 11:44:18,312 - INFO - TEST CASE 4 Retry 0 - Result - Failed
2025-04-17 11:44:18,312 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________ test_openai_llm_openai_json_completion ____________________
temp\temp.py:13: in test_openai_llm_openai_json_completion
    with patch("theory_evaluation.llm_handler.OpenAI_llm.client") as mock_client:
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_openai_llm_openai_json_completion - NameError: name...
1 failed in 1.23s
2025-04-17 11:44:20,417 - INFO - 
TEST CASE 4 Retry 1
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



from unittest.mock import patch, MagicMock
import pytest

@pytest.mark.asyncio
async def test_openai_llm_openai_json_completion():
    with patch("theory_evaluation.llm_handler.OpenAI_llm.client") as mock_client:
        mock_response = MagicMock()
        mock_response.choices[0].message.content = '{"answer": "42", "explanation": "The answer to life."}'
        mock_client.chat.completions.create.return_value = mock_response

        llm = OpenAI_llm(message="Test message", output="json")
        async for response in llm.execute():
            assert response == {"answer": "42", "explanation": "The answer to life."}

---------------
2025-04-17 11:44:22,931 - INFO - TEST CASE 4 Retry 1 - Result - Failed
2025-04-17 11:44:22,932 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________ test_openai_llm_openai_json_completion ____________________
temp\temp.py:16: in test_openai_llm_openai_json_completion
    with patch("theory_evaluation.llm_handler.OpenAI_llm.client") as mock_client:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\unittest\mock.py:1495: in __enter__
    original, local = self.get_original()
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\unittest\mock.py:1465: in get_original
    raise AttributeError(
E   AttributeError: <class 'theory_evaluation.llm_handler.OpenAI_llm'> does not have the attribute 'client'
=========================== short test summary info ===========================
FAILED temp/temp.py::test_openai_llm_openai_json_completion - AttributeError:...
1 failed in 1.62s
2025-04-17 11:44:25,658 - INFO - 
TEST CASE 4 Retry 2
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
async def test_openai_llm_openai_json_completion():
    with patch("theory_evaluation.llm_handler.OpenAI_llm.client", create=True) as mock_client:
        mock_response = MagicMock()
        mock_response.choices = [MagicMock()]
        mock_response.choices[0].message.content = '{"answer": "42", "explanation": "The answer to life."}'
        mock_client.chat.completions.create.return_value = mock_response

        llm = OpenAI_llm(message="Test message", output="json")
        async for response in llm.execute():
            assert response == {"answer": "42", "explanation": "The answer to life."}

---------------
2025-04-17 11:44:29,652 - INFO - TEST CASE 4 Retry 2 - Result - Failed
2025-04-17 11:44:29,653 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________ test_openai_llm_openai_json_completion ____________________
temp\temp.py:25: in test_openai_llm_openai_json_completion
    assert response == {"answer": "42", "explanation": "The answer to life."}
E   AssertionError: assert None == {'answer': '42', 'explanation': 'The answer to life.'}
---------------------------- Captured stdout call -----------------------------
Failed in _OpenAI_JSON_Completion: Error code: 400 - {'error': {'message': 'you must provide a model parameter', 'type': 'invalid_request_error', 'param': None, 'code': None}}
---------------------------- Captured log teardown ----------------------------
ERROR    asyncio:base_events.py:1871 Task was destroyed but it is pending!
task: <Task pending name='Task-4' coro=<<async_generator_athrow without __name__>()>>
============================== warnings summary ===============================
temp/temp.py::test_openai_llm_openai_json_completion
  C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\asyncio\base_events.py:750: RuntimeWarning: coroutine method 'aclose' of 'OpenAI_llm._run' was never awaited
    self._ready.clear()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED temp/temp.py::test_openai_llm_openai_json_completion - AssertionError:...
1 failed, 1 warning in 3.10s
2025-04-17 11:44:32,010 - INFO - Failed after all retries for test case 4
2025-04-17 11:44:32,011 - INFO - 
TEST CASE 5 Retry 0
---------------
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest



@pytest.mark.asyncio
async def test_openai_llm_openai_streaming():
    with patch("theory_evaluation.llm_handler.OpenAI_llm.client") as mock_client:
        mock_stream = MagicMock()
        mock_stream.__aiter__.return_value = [{"choices": [{"delta": {"content": "chunk1"}}]},
                                              {"choices": [{"delta": {"content": "chunk2"}}]}]
        mock_client.chat.completions.create.return_value = mock_stream

---------------
2025-04-17 11:44:34,059 - INFO - TEST CASE 5 Retry 0 - Result - Failed
2025-04-17 11:44:34,060 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
______________________ test_openai_llm_openai_streaming _______________________
temp\temp.py:13: in test_openai_llm_openai_streaming
    with patch("theory_evaluation.llm_handler.OpenAI_llm.client") as mock_client:
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_openai_llm_openai_streaming - NameError: name 'patc...
1 failed in 1.17s
