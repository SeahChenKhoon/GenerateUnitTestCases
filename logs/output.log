2025-04-16 14:49:40,966 - INFO - Loading environment variables start
2025-04-16 14:49:40,969 - INFO - Loading environment variables completes
2025-04-16 14:49:40,970 - INFO - Initialising of LLM start
2025-04-16 14:49:41,298 - INFO - Initialising of LLM completes
2025-04-16 14:49:41,298 - INFO - Getting python file starts
2025-04-16 14:49:41,299 - INFO - Getting python file completes
2025-04-16 14:49:41,299 - INFO - 
Start Processing file: theory_evaluation\config.py
2025-04-16 14:49:41,299 - INFO - Extraction of function and class start
2025-04-16 14:49:41,299 - INFO - extraction of function and class complete
2025-04-16 14:49:41,299 - INFO - Generate Unit Test Case starts
2025-04-16 14:49:41,299 - INFO - Extract unique import start
2025-04-16 14:49:42,849 - INFO - Extract unique import complete
2025-04-16 14:49:42,849 - INFO - Update relative import start
2025-04-16 14:49:42,851 - INFO - Update relative import complete
2025-04-16 14:49:44,415 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:49:44,416 - INFO - Generate Unit Test Case complete
2025-04-16 14:49:44,420 - INFO - run_each_pytest_function_individually start
2025-04-16 14:49:46,139 - INFO - Number of test case to process - 2
2025-04-16 14:49:46,139 - INFO - 

2025-04-16 14:49:46,139 - INFO - TEST CASE 1 Retry 0
2025-04-16 14:49:46,140 - INFO - ---------------
2025-04-16 14:49:46,140 - INFO - 
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


def test_settings_default_values():
    settings = Settings()
    assert settings.API_NAME == "project_simulation_fastapi"
    assert settings.API_V1_STR == "/api/v1"
    assert settings.LOGGER_CONFIG_PATH == "../conf/base/logging.yml"

2025-04-16 14:49:46,140 - INFO - ---------------
2025-04-16 14:49:47,884 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 14:49:47,884 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:2: in <module>
    from theory_evaluation.config import Settings
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.88s
2025-04-16 14:49:49,011 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:49:49,012 - INFO - TEST CASE 1 Retry 1
2025-04-16 14:49:49,012 - INFO - ---------------
2025-04-16 14:49:49,013 - INFO - 
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


# New Test Case
from theory_evaluation.config import Settings

def test_settings_default_values():
    settings = Settings()
    assert settings.API_NAME == "project_simulation_fastapi"
    assert settings.API_V1_STR == "/api/v1"
    assert settings.LOGGER_CONFIG_PATH == "../conf/base/logging.yml"

2025-04-16 14:49:49,013 - INFO - ---------------
2025-04-16 14:49:50,994 - INFO - TEST CASE 1 Retry 1 - Result - Failed
2025-04-16 14:49:50,994 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:2: in <module>
    from theory_evaluation.config import Settings
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.97s
2025-04-16 14:49:50,994 - INFO - Failed after all retries for test case 1
2025-04-16 14:49:52,081 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:49:52,082 - INFO - TEST CASE 1 Retry 2
2025-04-16 14:49:52,082 - INFO - ---------------
2025-04-16 14:49:52,083 - INFO - 
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


# New Test Case
from theory_evaluation.config import Settings

def test_settings_default_values():
    settings = Settings()
    assert settings.API_NAME == "project_simulation_fastapi"
    assert settings.API_V1_STR == "/api/v1"
    assert settings.LOGGER_CONFIG_PATH == "../conf/base/logging.yml"

2025-04-16 14:49:52,083 - INFO - ---------------
2025-04-16 14:49:54,196 - INFO - TEST CASE 1 Retry 2 - Result - Failed
2025-04-16 14:49:54,196 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:2: in <module>
    from theory_evaluation.config import Settings
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.99s
2025-04-16 14:49:54,197 - INFO - Failed after all retries for test case 1
2025-04-16 14:49:55,261 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:49:55,262 - INFO - TEST CASE 1 Retry 3
2025-04-16 14:49:55,262 - INFO - ---------------
2025-04-16 14:49:55,263 - INFO - 
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


# New Test Case
from theory_evaluation.config import Settings

def test_settings_default_values():
    settings = Settings()
    assert settings.API_NAME == "project_simulation_fastapi"
    assert settings.API_V1_STR == "/api/v1"
    assert settings.LOGGER_CONFIG_PATH == "../conf/base/logging.yml"

2025-04-16 14:49:55,263 - INFO - ---------------
2025-04-16 14:49:57,483 - INFO - TEST CASE 1 Retry 3 - Result - Failed
2025-04-16 14:49:57,483 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:2: in <module>
    from theory_evaluation.config import Settings
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.04s
2025-04-16 14:49:57,483 - INFO - Failed after all retries for test case 1
2025-04-16 14:49:57,484 - INFO - 

2025-04-16 14:49:57,484 - INFO - TEST CASE 2 Retry 0
2025-04-16 14:49:57,484 - INFO - ---------------
2025-04-16 14:49:57,484 - INFO - 
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


def test_settings_instance():
    assert isinstance(Settings(), BaseSettings)

2025-04-16 14:49:57,484 - INFO - ---------------
2025-04-16 14:49:59,398 - INFO - TEST CASE 2 Retry 0 - Result - Failed
2025-04-16 14:49:59,399 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:2: in <module>
    from theory_evaluation.config import Settings
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.86s
2025-04-16 14:50:00,325 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:50:00,326 - INFO - TEST CASE 2 Retry 1
2025-04-16 14:50:00,326 - INFO - ---------------
2025-04-16 14:50:00,326 - INFO - 
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


# New Test Case
from theory_evaluation.config import Settings
from pydantic_settings import BaseSettings

def test_settings_instance():
    assert isinstance(Settings(), BaseSettings)

2025-04-16 14:50:00,326 - INFO - ---------------
2025-04-16 14:50:02,160 - INFO - TEST CASE 2 Retry 1 - Result - Failed
2025-04-16 14:50:02,160 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:2: in <module>
    from theory_evaluation.config import Settings
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.92s
2025-04-16 14:50:02,160 - INFO - Failed after all retries for test case 2
2025-04-16 14:50:03,708 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:50:03,709 - INFO - TEST CASE 2 Retry 2
2025-04-16 14:50:03,709 - INFO - ---------------
2025-04-16 14:50:03,709 - INFO - 
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


# New Test Case
from theory_evaluation.config import Settings
from pydantic_settings import BaseSettings

def test_settings_instance():
    assert isinstance(Settings(), Settings.__base__)

2025-04-16 14:50:03,710 - INFO - ---------------
2025-04-16 14:50:05,431 - INFO - TEST CASE 2 Retry 2 - Result - Failed
2025-04-16 14:50:05,432 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:2: in <module>
    from theory_evaluation.config import Settings
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.87s
2025-04-16 14:50:05,432 - INFO - Failed after all retries for test case 2
2025-04-16 14:50:06,346 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:50:06,347 - INFO - TEST CASE 2 Retry 3
2025-04-16 14:50:06,347 - INFO - ---------------
2025-04-16 14:50:06,347 - INFO - 
from pydantic_settings import BaseSettings
from theory_evaluation.config import Settings
import pytest


# New Test Case
from theory_evaluation.config import Settings
from pydantic_settings import BaseSettings

def test_settings_instance():
    assert isinstance(Settings(), BaseSettings)

2025-04-16 14:50:06,348 - INFO - ---------------
2025-04-16 14:50:08,128 - INFO - TEST CASE 2 Retry 3 - Result - Failed
2025-04-16 14:50:08,129 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:2: in <module>
    from theory_evaluation.config import Settings
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.89s
2025-04-16 14:50:08,129 - INFO - Failed after all retries for test case 2
2025-04-16 14:50:08,129 - INFO - run_each_pytest_function_individually complete
2025-04-16 14:50:08,133 - INFO - End Processing file: theory_evaluation\config.py

2025-04-16 14:50:08,133 - INFO - 
Start Processing file: theory_evaluation\llm_handler.py
2025-04-16 14:50:08,134 - INFO - Extraction of function and class start
2025-04-16 14:50:08,135 - INFO - extraction of function and class complete
2025-04-16 14:50:08,135 - INFO - Generate Unit Test Case starts
2025-04-16 14:50:08,135 - INFO - Extract unique import start
2025-04-16 14:50:08,833 - INFO - Extract unique import complete
2025-04-16 14:50:08,833 - INFO - Update relative import start
2025-04-16 14:50:08,834 - INFO - Update relative import complete
2025-04-16 14:50:20,854 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:50:20,855 - INFO - Generate Unit Test Case complete
2025-04-16 14:50:20,858 - INFO - run_each_pytest_function_individually start
2025-04-16 14:50:38,313 - INFO - Number of test case to process - 7
2025-04-16 14:50:38,314 - INFO - 

2025-04-16 14:50:38,315 - INFO - TEST CASE 1 Retry 0
2025-04-16 14:50:38,316 - INFO - ---------------
2025-04-16 14:50:38,316 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

@pytest.mark.asyncio
async def test_openai_llm_initialization_with_openai(mock_openai):
    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False)
    assert llm.message == "Test message"
    assert hasattr(llm, "client")
    mock_openai.assert_called_once_with(api_key=os.environ.get("OPENAI_API_KEY"))

2025-04-16 14:50:38,317 - INFO - ---------------
2025-04-16 14:50:41,405 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 14:50:41,406 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.11s
2025-04-16 14:50:43,562 - INFO - TEST CASE 1 Retry 1
2025-04-16 14:50:43,563 - INFO - ---------------
2025-04-16 14:50:43,564 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch
import os
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_llm_initialization_with_openai(mock_openai):
    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False)
    assert llm.message == "Test message"
    assert hasattr(llm, "client")
    mock_openai.assert_called_once_with(api_key=os.environ.get("OPENAI_API_KEY"))

2025-04-16 14:50:43,565 - INFO - ---------------
2025-04-16 14:50:47,542 - INFO - TEST CASE 1 Retry 1 - Result - Failed
2025-04-16 14:50:47,543 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.56s
2025-04-16 14:50:47,545 - INFO - Failed after all retries for test case 1
2025-04-16 14:50:49,908 - INFO - TEST CASE 1 Retry 2
2025-04-16 14:50:49,909 - INFO - ---------------
2025-04-16 14:50:49,910 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch
import os
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_llm_initialization_with_openai(mock_openai):
    mock_openai.return_value = mock_openai  # Mock the return value of OpenAI
    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False)
    assert llm.message == "Test message"
    assert hasattr(llm, "client")
    mock_openai.assert_called_once_with(api_key=os.environ.get("OPENAI_API_KEY"))

2025-04-16 14:50:49,911 - INFO - ---------------
2025-04-16 14:50:53,468 - INFO - TEST CASE 1 Retry 2 - Result - Failed
2025-04-16 14:50:53,469 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.40s
2025-04-16 14:50:53,470 - INFO - Failed after all retries for test case 1
2025-04-16 14:50:55,576 - INFO - TEST CASE 1 Retry 3
2025-04-16 14:50:55,577 - INFO - ---------------
2025-04-16 14:50:55,578 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch
import os
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_llm_initialization_with_openai(mock_openai):
    mock_openai.return_value = mock_openai  # Mock the return value of OpenAI
    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False)
    assert llm.message == "Test message"
    assert hasattr(llm, "client")
    mock_openai.assert_called_once_with(api_key=os.environ.get("OPENAI_API_KEY"))

2025-04-16 14:50:55,580 - INFO - ---------------
2025-04-16 14:50:59,610 - INFO - TEST CASE 1 Retry 3 - Result - Failed
2025-04-16 14:50:59,612 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.43s
2025-04-16 14:50:59,612 - INFO - Failed after all retries for test case 1
2025-04-16 14:50:59,613 - INFO - 

2025-04-16 14:50:59,614 - INFO - TEST CASE 2 Retry 0
2025-04-16 14:50:59,614 - INFO - ---------------
2025-04-16 14:50:59,615 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

@pytest.mark.asyncio
async def test_openai_llm_initialization_with_azure_openai(mock_azure_openai):
    llm = OpenAI_llm(message="Test message", useAzureOpenAI=True)
    assert llm.message == "Test message"
    assert hasattr(llm, "client")
    mock_azure_openai.assert_called_once_with(
        azure_endpoint=llm.azure_endpoint,
        api_key=os.getenv("AZURE_OPENAI_API_KEY_SWEDEN"),
        api_version=llm.api_version,
        max_retries=llm.max_retries,
    )

2025-04-16 14:50:59,615 - INFO - ---------------
2025-04-16 14:51:03,253 - INFO - TEST CASE 2 Retry 0 - Result - Failed
2025-04-16 14:51:03,253 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.26s
2025-04-16 14:51:09,196 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:51:09,197 - INFO - TEST CASE 2 Retry 1
2025-04-16 14:51:09,198 - INFO - ---------------
2025-04-16 14:51:09,198 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
import os
import pytest
from unittest.mock import patch
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch("theory_evaluation.llm_handler.AzureOpenAI")
async def test_openai_llm_initialization_with_azure_openai(mock_azure_openai):
    llm = OpenAI_llm(message="Test message", useAzureOpenAI=True)
    assert llm.message == "Test message"
    assert hasattr(llm, "client")
    mock_azure_openai.assert_called_once_with(
        azure_endpoint=llm.azure_endpoint,
        api_key=os.getenv("AZURE_OPENAI_API_KEY_SWEDEN"),
        api_version=llm.api_version,
        max_retries=llm.max_retries,
    )

2025-04-16 14:51:09,199 - INFO - ---------------
2025-04-16 14:51:12,556 - INFO - TEST CASE 2 Retry 1 - Result - Failed
2025-04-16 14:51:12,556 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.17s
2025-04-16 14:51:12,557 - INFO - Failed after all retries for test case 2
2025-04-16 14:51:16,572 - INFO - TEST CASE 2 Retry 2
2025-04-16 14:51:16,573 - INFO - ---------------
2025-04-16 14:51:16,574 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
import os
import pytest
from unittest.mock import patch, MagicMock
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch("theory_evaluation.llm_handler.AzureOpenAI", autospec=True)
async def test_openai_llm_initialization_with_azure_openai(mock_azure_openai):
    mock_azure_instance = MagicMock()
    mock_azure_openai.return_value = mock_azure_instance

    llm = OpenAI_llm(message="Test message", useAzureOpenAI=True)
    assert llm.message == "Test message"
    assert hasattr(llm, "client")
    mock_azure_openai.assert_called_once_with(
        azure_endpoint=llm.azure_endpoint,
        api_key=os.getenv("AZURE_OPENAI_API_KEY_SWEDEN"),
        api_version=llm.api_version,
        max_retries=llm.max_retries,
    )

2025-04-16 14:51:16,574 - INFO - ---------------
2025-04-16 14:51:19,610 - INFO - TEST CASE 2 Retry 2 - Result - Failed
2025-04-16 14:51:19,611 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.85s
2025-04-16 14:51:19,611 - INFO - Failed after all retries for test case 2
2025-04-16 14:51:22,740 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:51:22,741 - INFO - TEST CASE 2 Retry 3
2025-04-16 14:51:22,741 - INFO - ---------------
2025-04-16 14:51:22,741 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
import os
import pytest
from unittest.mock import patch, MagicMock
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch("theory_evaluation.llm_handler.AzureOpenAI", autospec=True)
async def test_openai_llm_initialization_with_azure_openai(mock_azure_openai):
    mock_azure_instance = MagicMock()
    mock_azure_openai.return_value = mock_azure_instance

    llm = OpenAI_llm(message="Test message", useAzureOpenAI=True)
    assert llm.message == "Test message"
    assert hasattr(llm, "client")
    mock_azure_openai.assert_called_once_with(
        azure_endpoint=llm.azure_endpoint,
        api_key=os.getenv("AZURE_OPENAI_API_KEY_SWEDEN"),
        api_version=llm.api_version,
        max_retries=llm.max_retries,
    )

2025-04-16 14:51:22,742 - INFO - ---------------
2025-04-16 14:51:25,297 - INFO - TEST CASE 2 Retry 3 - Result - Failed
2025-04-16 14:51:25,297 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.48s
2025-04-16 14:51:25,297 - INFO - Failed after all retries for test case 2
2025-04-16 14:51:25,298 - INFO - 

2025-04-16 14:51:25,298 - INFO - TEST CASE 3 Retry 0
2025-04-16 14:51:25,298 - INFO - ---------------
2025-04-16 14:51:25,298 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

@pytest.mark.asyncio
async def test_openai_json_completion(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content=json.dumps({"key": "value"})))
    ]
    mock_openai.return_value = mock_client

2025-04-16 14:51:25,298 - INFO - ---------------
2025-04-16 14:51:28,070 - INFO - TEST CASE 3 Retry 0 - Result - Failed
2025-04-16 14:51:28,070 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.64s
2025-04-16 14:51:30,699 - INFO - TEST CASE 3 Retry 1
2025-04-16 14:51:30,700 - INFO - ---------------
2025-04-16 14:51:30,700 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
import json
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_json_completion(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content=json.dumps({"key": "value"})))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(output="json")
    result = None
    async for response in llm.execute():
        result = response

    assert result == {"key": "value"}

2025-04-16 14:51:30,700 - INFO - ---------------
2025-04-16 14:51:34,616 - INFO - TEST CASE 3 Retry 1 - Result - Failed
2025-04-16 14:51:34,616 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.49s
2025-04-16 14:51:34,616 - INFO - Failed after all retries for test case 3
2025-04-16 14:51:37,233 - INFO - TEST CASE 3 Retry 2
2025-04-16 14:51:37,233 - INFO - ---------------
2025-04-16 14:51:37,234 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
import json
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_json_completion(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content=json.dumps({"key": "value"})))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(output="json")
    result = None
    async for response in llm.execute():
        result = response

    assert result == {"key": "value"}

2025-04-16 14:51:37,234 - INFO - ---------------
2025-04-16 14:51:40,318 - INFO - TEST CASE 3 Retry 2 - Result - Failed
2025-04-16 14:51:40,318 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.79s
2025-04-16 14:51:40,318 - INFO - Failed after all retries for test case 3
2025-04-16 14:51:43,321 - INFO - TEST CASE 3 Retry 3
2025-04-16 14:51:43,321 - INFO - ---------------
2025-04-16 14:51:43,322 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
import json
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_json_completion(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content=json.dumps({"key": "value"})))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(output="json")
    result = None
    async for response in llm.execute():
        result = response

    assert result == {"key": "value"}

2025-04-16 14:51:43,322 - INFO - ---------------
2025-04-16 14:51:46,134 - INFO - TEST CASE 3 Retry 3 - Result - Failed
2025-04-16 14:51:46,135 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.62s
2025-04-16 14:51:46,135 - INFO - Failed after all retries for test case 3
2025-04-16 14:51:46,135 - INFO - 

2025-04-16 14:51:46,135 - INFO - TEST CASE 4 Retry 0
2025-04-16 14:51:46,135 - INFO - ---------------
2025-04-16 14:51:46,135 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

@pytest.mark.asyncio
async def test_openai_streaming(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value = [
        MagicMock(choices=[MagicMock(delta=MagicMock(content="chunk1"))]),
        MagicMock(choices=[MagicMock(delta=MagicMock(content="chunk2"))]),
    ]
    mock_openai.return_value = mock_client

2025-04-16 14:51:46,135 - INFO - ---------------
2025-04-16 14:51:48,787 - INFO - TEST CASE 4 Retry 0 - Result - Failed
2025-04-16 14:51:48,787 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.71s
2025-04-16 14:51:53,232 - INFO - TEST CASE 4 Retry 1
2025-04-16 14:51:53,232 - INFO - ---------------
2025-04-16 14:51:53,233 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_streaming(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value = [
        MagicMock(choices=[MagicMock(delta=MagicMock(content="chunk1"))]),
        MagicMock(choices=[MagicMock(delta=MagicMock(content="chunk2"))]),
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(output="stream")
    responses = []
    async for token in llm.execute():
        responses.append(token)

    assert responses == ["chunk1", "chunk2"]

2025-04-16 14:51:53,233 - INFO - ---------------
2025-04-16 14:51:56,672 - INFO - TEST CASE 4 Retry 1 - Result - Failed
2025-04-16 14:51:56,673 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.08s
2025-04-16 14:51:56,673 - INFO - Failed after all retries for test case 4
2025-04-16 14:51:59,467 - INFO - TEST CASE 4 Retry 2
2025-04-16 14:51:59,467 - INFO - ---------------
2025-04-16 14:51:59,467 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_streaming(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value = iter([
        MagicMock(choices=[MagicMock(delta=MagicMock(content="chunk1"))]),
        MagicMock(choices=[MagicMock(delta=MagicMock(content="chunk2"))]),
    ])
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(output="stream")
    responses = []
    async for token in llm.execute():
        responses.append(token)

    assert responses == ["chunk1", "chunk2"]

2025-04-16 14:51:59,467 - INFO - ---------------
2025-04-16 14:52:02,196 - INFO - TEST CASE 4 Retry 2 - Result - Failed
2025-04-16 14:52:02,196 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.69s
2025-04-16 14:52:02,197 - INFO - Failed after all retries for test case 4
2025-04-16 14:52:05,344 - INFO - TEST CASE 4 Retry 3
2025-04-16 14:52:05,344 - INFO - ---------------
2025-04-16 14:52:05,345 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_streaming(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value = iter([
        MagicMock(choices=[MagicMock(delta=MagicMock(content="chunk1"))]),
        MagicMock(choices=[MagicMock(delta=MagicMock(content="chunk2"))]),
    ])
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(output="stream")
    responses = []
    async for token in llm.execute():
        responses.append(token)

    assert responses == ["chunk1", "chunk2"]

2025-04-16 14:52:05,345 - INFO - ---------------
2025-04-16 14:52:08,372 - INFO - TEST CASE 4 Retry 3 - Result - Failed
2025-04-16 14:52:08,373 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.86s
2025-04-16 14:52:08,373 - INFO - Failed after all retries for test case 4
2025-04-16 14:52:08,373 - INFO - 

2025-04-16 14:52:08,373 - INFO - TEST CASE 5 Retry 0
2025-04-16 14:52:08,373 - INFO - ---------------
2025-04-16 14:52:08,373 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

@pytest.mark.asyncio
async def test_openai_chat_completion(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

2025-04-16 14:52:08,373 - INFO - ---------------
2025-04-16 14:52:11,267 - INFO - TEST CASE 5 Retry 0 - Result - Failed
2025-04-16 14:52:11,267 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.72s
2025-04-16 14:52:13,825 - INFO - TEST CASE 5 Retry 1
2025-04-16 14:52:13,826 - INFO - ---------------
2025-04-16 14:52:13,826 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_chat_completion(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False)
    async for response in llm.execute():
        assert response == "response content"

2025-04-16 14:52:13,826 - INFO - ---------------
2025-04-16 14:52:16,635 - INFO - TEST CASE 5 Retry 1 - Result - Failed
2025-04-16 14:52:16,636 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.76s
2025-04-16 14:52:16,636 - INFO - Failed after all retries for test case 5
2025-04-16 14:52:19,146 - INFO - TEST CASE 5 Retry 2
2025-04-16 14:52:19,147 - INFO - ---------------
2025-04-16 14:52:19,147 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_chat_completion(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False)
    async for response in llm.execute():
        assert response == "response content"

2025-04-16 14:52:19,147 - INFO - ---------------
2025-04-16 14:52:22,864 - INFO - TEST CASE 5 Retry 2 - Result - Failed
2025-04-16 14:52:22,864 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.63s
2025-04-16 14:52:22,865 - INFO - Failed after all retries for test case 5
2025-04-16 14:52:25,132 - INFO - TEST CASE 5 Retry 3
2025-04-16 14:52:25,133 - INFO - ---------------
2025-04-16 14:52:25,133 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_openai_chat_completion(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False)
    async for response in llm.execute():
        assert response == "response content"

2025-04-16 14:52:25,134 - INFO - ---------------
2025-04-16 14:52:28,053 - INFO - TEST CASE 5 Retry 3 - Result - Failed
2025-04-16 14:52:28,053 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.71s
2025-04-16 14:52:28,053 - INFO - Failed after all retries for test case 5
2025-04-16 14:52:28,053 - INFO - 

2025-04-16 14:52:28,053 - INFO - TEST CASE 6 Retry 0
2025-04-16 14:52:28,053 - INFO - ---------------
2025-04-16 14:52:28,053 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

@pytest.mark.asyncio
async def test_execute_text_generation(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

2025-04-16 14:52:28,054 - INFO - ---------------
2025-04-16 14:52:30,742 - INFO - TEST CASE 6 Retry 0 - Result - Failed
2025-04-16 14:52:30,743 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.67s
2025-04-16 14:52:34,279 - INFO - TEST CASE 6 Retry 1
2025-04-16 14:52:34,280 - INFO - ---------------
2025-04-16 14:52:34,281 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch("theory_evaluation.llm_handler.OpenAI")
async def test_execute_text_generation(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False, output=None)
    responses = []
    async for response in llm.execute():
        responses.append(response)

    assert responses == ["response content"]

2025-04-16 14:52:34,281 - INFO - ---------------
2025-04-16 14:52:37,942 - INFO - TEST CASE 6 Retry 1 - Result - Failed
2025-04-16 14:52:37,943 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.47s
2025-04-16 14:52:37,943 - INFO - Failed after all retries for test case 6
2025-04-16 14:52:40,593 - INFO - TEST CASE 6 Retry 2
2025-04-16 14:52:40,593 - INFO - ---------------
2025-04-16 14:52:40,594 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch("theory_evaluation.llm_handler.OpenAI")
async def test_execute_text_generation(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False, output=None)
    responses = []
    async for response in llm.execute():
        responses.append(response)

    assert responses == ["response content"]

2025-04-16 14:52:40,594 - INFO - ---------------
2025-04-16 14:52:43,971 - INFO - TEST CASE 6 Retry 2 - Result - Failed
2025-04-16 14:52:43,971 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.21s
2025-04-16 14:52:43,971 - INFO - Failed after all retries for test case 6
2025-04-16 14:52:46,695 - INFO - TEST CASE 6 Retry 3
2025-04-16 14:52:46,695 - INFO - ---------------
2025-04-16 14:52:46,696 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch("theory_evaluation.llm_handler.OpenAI")
async def test_execute_text_generation(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(message="Test message", useAzureOpenAI=False, output=None)
    responses = []
    async for response in llm.execute():
        responses.append(response)

    assert responses == ["response content"]

2025-04-16 14:52:46,696 - INFO - ---------------
2025-04-16 14:52:49,312 - INFO - TEST CASE 6 Retry 3 - Result - Failed
2025-04-16 14:52:49,312 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.72s
2025-04-16 14:52:49,312 - INFO - Failed after all retries for test case 6
2025-04-16 14:52:49,312 - INFO - 

2025-04-16 14:52:49,313 - INFO - TEST CASE 7 Retry 0
2025-04-16 14:52:49,313 - INFO - ---------------
2025-04-16 14:52:49,313 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

@pytest.mark.asyncio
async def test_execute_vision(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content="response content"))
    ]
    mock_openai.return_value = mock_client

2025-04-16 14:52:49,313 - INFO - ---------------
2025-04-16 14:52:53,794 - INFO - TEST CASE 7 Retry 0 - Result - Failed
2025-04-16 14:52:53,794 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.84s
2025-04-16 14:52:57,662 - INFO - TEST CASE 7 Retry 1
2025-04-16 14:52:57,663 - INFO - ---------------
2025-04-16 14:52:57,664 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_execute_vision(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content='{"answer": "Yes", "explanation": "Azure OpenAI supports customer managed keys."}'))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(
        message="You are a helpful assistant.",
        useAzureOpenAI=False,
        output="json",
        mode="vision"
    )

    responses = []
    async for response in llm.execute():
        responses.append(response)

    assert responses[0] == {"answer": "Yes", "explanation": "Azure OpenAI supports customer managed keys."}

2025-04-16 14:52:57,665 - INFO - ---------------
2025-04-16 14:53:01,261 - INFO - TEST CASE 7 Retry 1 - Result - Failed
2025-04-16 14:53:01,262 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.46s
2025-04-16 14:53:01,263 - INFO - Failed after all retries for test case 7
2025-04-16 14:53:04,325 - INFO - TEST CASE 7 Retry 2
2025-04-16 14:53:04,326 - INFO - ---------------
2025-04-16 14:53:04,327 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_execute_vision(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content='{"answer": "Yes", "explanation": "Azure OpenAI supports customer managed keys."}'))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(
        message="You are a helpful assistant.",
        useAzureOpenAI=False,
        output="json",
        mode="vision"
    )

    responses = []
    async for response in llm.execute():
        responses.append(response)

    assert responses[0] == {"answer": "Yes", "explanation": "Azure OpenAI supports customer managed keys."}

2025-04-16 14:53:04,327 - INFO - ---------------
2025-04-16 14:53:07,186 - INFO - TEST CASE 7 Retry 2 - Result - Failed
2025-04-16 14:53:07,187 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.74s
2025-04-16 14:53:07,188 - INFO - Failed after all retries for test case 7
2025-04-16 14:53:10,584 - INFO - TEST CASE 7 Retry 3
2025-04-16 14:53:10,586 - INFO - ---------------
2025-04-16 14:53:10,588 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI
from theory_evaluation.llm_handler import OpenAI_llm
import pytest
@pytest.fixture
def mock_openai():
    with patch("theory_evaluation.llm_handler.OpenAI") as mock:
        yield mock

@pytest.fixture
def mock_azure_openai():
    with patch("theory_evaluation.llm_handler.AzureOpenAI") as mock:
        yield mock

# New Test Case
from unittest.mock import patch, MagicMock
import pytest
from theory_evaluation.llm_handler import OpenAI_llm

@pytest.mark.asyncio
@patch('theory_evaluation.llm_handler.OpenAI')
async def test_execute_vision(mock_openai):
    mock_client = MagicMock()
    mock_client.chat.completions.create.return_value.choices = [
        MagicMock(message=MagicMock(content='{"answer": "Yes", "explanation": "Azure OpenAI supports customer managed keys."}'))
    ]
    mock_openai.return_value = mock_client

    llm = OpenAI_llm(
        message="You are a helpful assistant.",
        useAzureOpenAI=False,
        output="json",
        mode="vision"
    )

    responses = []
    async for response in llm.execute():
        responses.append(response)

    assert responses[0] == {"answer": "Yes", "explanation": "Azure OpenAI supports customer managed keys."}

2025-04-16 14:53:10,589 - INFO - ---------------
2025-04-16 14:53:14,522 - INFO - TEST CASE 7 Retry 3 - Result - Failed
2025-04-16 14:53:14,523 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:6: in <module>
    from theory_evaluation.llm_handler import OpenAI_llm
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.61s
2025-04-16 14:53:14,524 - INFO - Failed after all retries for test case 7
2025-04-16 14:53:14,524 - INFO - run_each_pytest_function_individually complete
2025-04-16 14:53:14,533 - INFO - End Processing file: theory_evaluation\llm_handler.py

2025-04-16 14:53:14,534 - INFO - 
Start Processing file: theory_evaluation\models.py
2025-04-16 14:53:14,537 - INFO - Extraction of function and class start
2025-04-16 14:53:14,539 - INFO - extraction of function and class complete
2025-04-16 14:53:14,540 - INFO - Generate Unit Test Case starts
2025-04-16 14:53:14,542 - INFO - Extract unique import start
2025-04-16 14:53:16,020 - INFO - Extract unique import complete
2025-04-16 14:53:16,021 - INFO - Update relative import start
2025-04-16 14:53:16,023 - INFO - Update relative import complete
2025-04-16 14:53:33,296 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:53:33,298 - INFO - Generate Unit Test Case complete
2025-04-16 14:53:33,306 - INFO - run_each_pytest_function_individually start
2025-04-16 14:53:42,063 - INFO - Number of test case to process - 10
2025-04-16 14:53:42,064 - INFO - 

2025-04-16 14:53:42,065 - INFO - TEST CASE 1 Retry 0
2025-04-16 14:53:42,066 - INFO - ---------------
2025-04-16 14:53:42,066 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_user_info_table_columns():
    inspector = inspect(UserInfo)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "first_name", "last_name", "email", "github_username",
        "payment_date", "current_duration", "course_duration", "end_date", "status"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:53:42,067 - INFO - ---------------
2025-04-16 14:53:44,486 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 14:53:44,487 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.15s
2025-04-16 14:53:46,304 - INFO - TEST CASE 1 Retry 1
2025-04-16 14:53:46,305 - INFO - ---------------
2025-04-16 14:53:46,305 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
def test_user_info_table_columns():
    from sqlalchemy import inspect
    inspector = inspect(UserInfo)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "first_name", "last_name", "email", "github_username",
        "payment_date", "current_duration", "course_duration", "end_date", "status"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:53:46,306 - INFO - ---------------
2025-04-16 14:53:48,518 - INFO - TEST CASE 1 Retry 1 - Result - Failed
2025-04-16 14:53:48,519 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.05s
2025-04-16 14:53:48,520 - INFO - Failed after all retries for test case 1
2025-04-16 14:53:51,117 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:53:51,118 - INFO - TEST CASE 1 Retry 2
2025-04-16 14:53:51,119 - INFO - ---------------
2025-04-16 14:53:51,120 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from theory_evaluation.models import UserInfo

@pytest.fixture(scope="module")
def setup_database():
    # Setup code for database connection and tables creation
    # This is a placeholder for actual database setup code
    pass

def test_user_info_table_columns(setup_database):
    inspector = inspect(UserInfo)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "first_name", "last_name", "email", "github_username",
        "payment_date", "current_duration", "course_duration", "end_date", "status"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:53:51,121 - INFO - ---------------
2025-04-16 14:53:53,922 - INFO - TEST CASE 1 Retry 2 - Result - Failed
2025-04-16 14:53:53,923 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.45s
2025-04-16 14:53:53,924 - INFO - Failed after all retries for test case 1
2025-04-16 14:53:56,545 - INFO - TEST CASE 1 Retry 3
2025-04-16 14:53:56,546 - INFO - ---------------
2025-04-16 14:53:56,547 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from theory_evaluation.models import UserInfo

@pytest.fixture(scope="module")
def setup_database():
    # Setup code for database connection and tables creation
    # This is a placeholder for actual database setup code
    pass

def test_user_info_table_columns(setup_database):
    inspector = inspect(UserInfo)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "first_name", "last_name", "email", "github_username",
        "payment_date", "current_duration", "course_duration", "end_date", "status"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:53:56,550 - INFO - ---------------
2025-04-16 14:53:58,600 - INFO - TEST CASE 1 Retry 3 - Result - Failed
2025-04-16 14:53:58,601 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.03s
2025-04-16 14:53:58,602 - INFO - Failed after all retries for test case 1
2025-04-16 14:53:58,602 - INFO - 

2025-04-16 14:53:58,603 - INFO - TEST CASE 2 Retry 0
2025-04-16 14:53:58,603 - INFO - ---------------
2025-04-16 14:53:58,604 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_projects_table_columns():
    inspector = inspect(Projects)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "repo_name", "problem_statement", "bloblink",
        "mini_project_flag", "ctime"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:53:58,604 - INFO - ---------------
2025-04-16 14:54:00,710 - INFO - TEST CASE 2 Retry 0 - Result - Failed
2025-04-16 14:54:00,711 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.96s
2025-04-16 14:54:02,499 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:54:02,500 - INFO - TEST CASE 2 Retry 1
2025-04-16 14:54:02,501 - INFO - ---------------
2025-04-16 14:54:02,502 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import Projects

def test_projects_table_columns():
    inspector = inspect(Projects)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "repo_name", "problem_statement", "bloblink",
        "mini_project_flag", "ctime"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:02,503 - INFO - ---------------
2025-04-16 14:54:05,169 - INFO - TEST CASE 2 Retry 1 - Result - Failed
2025-04-16 14:54:05,170 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.03s
2025-04-16 14:54:05,171 - INFO - Failed after all retries for test case 2
2025-04-16 14:54:10,734 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:54:10,736 - INFO - TEST CASE 2 Retry 2
2025-04-16 14:54:10,737 - INFO - ---------------
2025-04-16 14:54:10,738 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from theory_evaluation.models import Projects

@pytest.fixture(scope="module")
def setup_database():
    # Setup code for database connection and initialization
    pass

def test_projects_table_columns(setup_database):
    inspector = inspect(Projects)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "repo_name", "problem_statement", "bloblink",
        "mini_project_flag", "ctime"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:10,742 - INFO - ---------------
2025-04-16 14:54:13,950 - INFO - TEST CASE 2 Retry 2 - Result - Failed
2025-04-16 14:54:13,950 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.23s
2025-04-16 14:54:13,951 - INFO - Failed after all retries for test case 2
2025-04-16 14:54:18,034 - INFO - TEST CASE 2 Retry 3
2025-04-16 14:54:18,035 - INFO - ---------------
2025-04-16 14:54:18,036 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from theory_evaluation.models import Projects

@pytest.fixture(scope="module")
def setup_database():
    # Setup code for database connection and initialization
    pass

def test_projects_table_columns(setup_database):
    inspector = inspect(Projects)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "repo_name", "problem_statement", "bloblink",
        "mini_project_flag", "ctime"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:18,037 - INFO - ---------------
2025-04-16 14:54:20,130 - INFO - TEST CASE 2 Retry 3 - Result - Failed
2025-04-16 14:54:20,130 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.05s
2025-04-16 14:54:20,131 - INFO - Failed after all retries for test case 2
2025-04-16 14:54:20,131 - INFO - 

2025-04-16 14:54:20,132 - INFO - TEST CASE 3 Retry 0
2025-04-16 14:54:20,132 - INFO - ---------------
2025-04-16 14:54:20,132 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_sprint_issues_table_columns():
    inspector = inspect(SprintIssues)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "psid", "sprint_no", "issue_no", "title",
        "description", "max_evaluations", "last_issue_flag"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:20,132 - INFO - ---------------
2025-04-16 14:54:22,334 - INFO - TEST CASE 3 Retry 0 - Result - Failed
2025-04-16 14:54:22,335 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.09s
2025-04-16 14:54:25,788 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:54:25,789 - INFO - TEST CASE 3 Retry 1
2025-04-16 14:54:25,790 - INFO - ---------------
2025-04-16 14:54:25,790 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from your_module_name import SprintIssues  # Replace 'your_module_name' with the actual module name

def test_sprint_issues_table_columns():
    inspector = inspect(SprintIssues)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "psid", "sprint_no", "issue_no", "title",
        "description", "max_evaluations", "last_issue_flag"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:25,791 - INFO - ---------------
2025-04-16 14:54:27,797 - INFO - TEST CASE 3 Retry 1 - Result - Failed
2025-04-16 14:54:27,798 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.04s
2025-04-16 14:54:27,799 - INFO - Failed after all retries for test case 3
2025-04-16 14:54:29,766 - INFO - TEST CASE 3 Retry 2
2025-04-16 14:54:29,768 - INFO - ---------------
2025-04-16 14:54:29,769 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import SprintIssues

def test_sprint_issues_table_columns():
    inspector = inspect(SprintIssues)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "psid", "sprint_no", "issue_no", "title",
        "description", "max_evaluations", "last_issue_flag"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:29,770 - INFO - ---------------
2025-04-16 14:54:32,960 - INFO - TEST CASE 3 Retry 2 - Result - Failed
2025-04-16 14:54:32,961 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.47s
2025-04-16 14:54:32,962 - INFO - Failed after all retries for test case 3
2025-04-16 14:54:34,873 - INFO - TEST CASE 3 Retry 3
2025-04-16 14:54:34,874 - INFO - ---------------
2025-04-16 14:54:34,874 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import SprintIssues

def test_sprint_issues_table_columns():
    inspector = inspect(SprintIssues.__table__)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "psid", "sprint_no", "issue_no", "title",
        "description", "max_evaluations", "last_issue_flag"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:34,875 - INFO - ---------------
2025-04-16 14:54:37,331 - INFO - TEST CASE 3 Retry 3 - Result - Failed
2025-04-16 14:54:37,331 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.87s
2025-04-16 14:54:37,332 - INFO - Failed after all retries for test case 3
2025-04-16 14:54:37,332 - INFO - 

2025-04-16 14:54:37,332 - INFO - TEST CASE 4 Retry 0
2025-04-16 14:54:37,333 - INFO - ---------------
2025-04-16 14:54:37,333 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_user_repo_table_columns():
    inspector = inspect(UserRepo)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "user_id", "psid", "github_username", "repo_name", "github_url"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:37,333 - INFO - ---------------
2025-04-16 14:54:39,310 - INFO - TEST CASE 4 Retry 0 - Result - Failed
2025-04-16 14:54:39,311 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.97s
2025-04-16 14:54:40,803 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:54:40,804 - INFO - TEST CASE 4 Retry 1
2025-04-16 14:54:40,805 - INFO - ---------------
2025-04-16 14:54:40,805 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import UserRepo

def test_user_repo_table_columns():
    inspector = inspect(UserRepo)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "github_username", "repo_name", "github_url"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:40,806 - INFO - ---------------
2025-04-16 14:54:43,049 - INFO - TEST CASE 4 Retry 1 - Result - Failed
2025-04-16 14:54:43,050 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.94s
2025-04-16 14:54:43,051 - INFO - Failed after all retries for test case 4
2025-04-16 14:54:45,068 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:54:45,069 - INFO - TEST CASE 4 Retry 2
2025-04-16 14:54:45,070 - INFO - ---------------
2025-04-16 14:54:45,071 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from theory_evaluation.models import UserRepo

@pytest.fixture(scope="module")
def setup_database():
    # Setup code for the database connection and tables
    # This is a placeholder for actual setup code
    pass

def test_user_repo_table_columns(setup_database):
    inspector = inspect(UserRepo)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "github_username", "repo_name", "github_url"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:45,072 - INFO - ---------------
2025-04-16 14:54:47,261 - INFO - TEST CASE 4 Retry 2 - Result - Failed
2025-04-16 14:54:47,262 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.99s
2025-04-16 14:54:47,262 - INFO - Failed after all retries for test case 4
2025-04-16 14:54:49,477 - INFO - TEST CASE 4 Retry 3
2025-04-16 14:54:49,478 - INFO - ---------------
2025-04-16 14:54:49,479 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from theory_evaluation.models import UserRepo, Base

@pytest.fixture(scope="module")
def setup_database():
    engine = create_engine('sqlite:///:memory:')
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    session = Session()
    yield session
    session.close()

def test_user_repo_table_columns(setup_database):
    inspector = inspect(UserRepo)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "github_username", "repo_name", "github_url"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:49,480 - INFO - ---------------
2025-04-16 14:54:51,858 - INFO - TEST CASE 4 Retry 3 - Result - Failed
2025-04-16 14:54:51,859 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.25s
2025-04-16 14:54:51,860 - INFO - Failed after all retries for test case 4
2025-04-16 14:54:51,860 - INFO - 

2025-04-16 14:54:51,861 - INFO - TEST CASE 5 Retry 0
2025-04-16 14:54:51,861 - INFO - ---------------
2025-04-16 14:54:51,865 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_user_score_log_table_columns():
    inspector = inspect(UserScoreLog)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "user_id", "psid", "eval_sprint", "eval_issue", "stage",
        "score_number", "score_status", "current_sprint", "current_issue",
        "num_tries", "max_tries", "ctime"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:51,869 - INFO - ---------------
2025-04-16 14:54:54,322 - INFO - TEST CASE 5 Retry 0 - Result - Failed
2025-04-16 14:54:54,323 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.25s
2025-04-16 14:54:56,968 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:54:56,970 - INFO - TEST CASE 5 Retry 1
2025-04-16 14:54:56,970 - INFO - ---------------
2025-04-16 14:54:56,971 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
def test_user_score_log_table_columns():
    inspector = inspect(UserScoreLog)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "eval_sprint", "eval_issue", "stage",
        "score_number", "score_status", "current_sprint", "current_issue",
        "num_tries", "max_tries", "ctime"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:54:56,972 - INFO - ---------------
2025-04-16 14:54:59,156 - INFO - TEST CASE 5 Retry 1 - Result - Failed
2025-04-16 14:54:59,157 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.05s
2025-04-16 14:54:59,158 - INFO - Failed after all retries for test case 5
2025-04-16 14:55:01,455 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:55:01,456 - INFO - TEST CASE 5 Retry 2
2025-04-16 14:55:01,457 - INFO - ---------------
2025-04-16 14:55:01,458 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import UserScoreLog

def test_user_score_log_table_columns():
    inspector = inspect(UserScoreLog)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "eval_sprint", "eval_issue", "stage",
        "score_number", "score_status", "current_sprint", "current_issue",
        "num_tries", "max_tries", "ctime"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:01,458 - INFO - ---------------
2025-04-16 14:55:03,661 - INFO - TEST CASE 5 Retry 2 - Result - Failed
2025-04-16 14:55:03,662 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.83s
2025-04-16 14:55:03,663 - INFO - Failed after all retries for test case 5
2025-04-16 14:55:05,808 - INFO - TEST CASE 5 Retry 3
2025-04-16 14:55:05,808 - INFO - ---------------
2025-04-16 14:55:05,808 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import UserScoreLog

def test_user_score_log_table_columns():
    inspector = inspect(UserScoreLog.__table__)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "eval_sprint", "eval_issue", "stage",
        "score_number", "score_status", "current_sprint", "current_issue",
        "num_tries", "max_tries", "ctime"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:05,809 - INFO - ---------------
2025-04-16 14:55:08,190 - INFO - TEST CASE 5 Retry 3 - Result - Failed
2025-04-16 14:55:08,191 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.99s
2025-04-16 14:55:08,191 - INFO - Failed after all retries for test case 5
2025-04-16 14:55:08,191 - INFO - 

2025-04-16 14:55:08,192 - INFO - TEST CASE 6 Retry 0
2025-04-16 14:55:08,192 - INFO - ---------------
2025-04-16 14:55:08,192 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_current_user_table_columns():
    inspector = inspect(CurrentUserTable)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "user_id", "psid", "current_sprint", "current_issue", "ctime", "num_tries"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:08,193 - INFO - ---------------
2025-04-16 14:55:10,445 - INFO - TEST CASE 6 Retry 0 - Result - Failed
2025-04-16 14:55:10,447 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.19s
2025-04-16 14:55:12,214 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:55:12,215 - INFO - TEST CASE 6 Retry 1
2025-04-16 14:55:12,215 - INFO - ---------------
2025-04-16 14:55:12,215 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import CurrentUserTable

def test_current_user_table_columns():
    inspector = inspect(CurrentUserTable)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "current_sprint", "current_issue", "ctime", "num_tries"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:12,216 - INFO - ---------------
2025-04-16 14:55:14,900 - INFO - TEST CASE 6 Retry 1 - Result - Failed
2025-04-16 14:55:14,900 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.10s
2025-04-16 14:55:14,901 - INFO - Failed after all retries for test case 6
2025-04-16 14:55:16,687 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:55:16,688 - INFO - TEST CASE 6 Retry 2
2025-04-16 14:55:16,689 - INFO - ---------------
2025-04-16 14:55:16,689 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import CurrentUserTable

def test_current_user_table_columns():
    inspector = inspect(CurrentUserTable)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "current_sprint", "current_issue", "ctime", "num_tries"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:16,690 - INFO - ---------------
2025-04-16 14:55:18,711 - INFO - TEST CASE 6 Retry 2 - Result - Failed
2025-04-16 14:55:18,712 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.78s
2025-04-16 14:55:18,713 - INFO - Failed after all retries for test case 6
2025-04-16 14:55:20,237 - INFO - TEST CASE 6 Retry 3
2025-04-16 14:55:20,238 - INFO - ---------------
2025-04-16 14:55:20,239 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import CurrentUserTable

def test_current_user_table_columns():
    inspector = inspect(CurrentUserTable)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "psid", "current_sprint", "current_issue", "ctime", "num_tries"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:20,240 - INFO - ---------------
2025-04-16 14:55:22,218 - INFO - TEST CASE 6 Retry 3 - Result - Failed
2025-04-16 14:55:22,219 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.05s
2025-04-16 14:55:22,219 - INFO - Failed after all retries for test case 6
2025-04-16 14:55:22,219 - INFO - 

2025-04-16 14:55:22,219 - INFO - TEST CASE 7 Retry 0
2025-04-16 14:55:22,219 - INFO - ---------------
2025-04-16 14:55:22,220 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_consultant_chat_table_columns():
    inspector = inspect(ConsultantChat)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "email", "consultant_history", "modified_on", "project_id"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:22,220 - INFO - ---------------
2025-04-16 14:55:24,215 - INFO - TEST CASE 7 Retry 0 - Result - Failed
2025-04-16 14:55:24,217 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.94s
2025-04-16 14:55:26,389 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:55:26,390 - INFO - TEST CASE 7 Retry 1
2025-04-16 14:55:26,391 - INFO - ---------------
2025-04-16 14:55:26,392 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from theory_evaluation.models import ConsultantChat

@pytest.fixture(scope="module")
def setup_database():
    # Setup code for the database connection and session
    pass

def test_consultant_chat_table_columns(setup_database):
    inspector = inspect(ConsultantChat)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "email", "consultant_history", "modified_on", "project_id"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:26,393 - INFO - ---------------
2025-04-16 14:55:29,240 - INFO - TEST CASE 7 Retry 1 - Result - Failed
2025-04-16 14:55:29,241 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.19s
2025-04-16 14:55:29,242 - INFO - Failed after all retries for test case 7
2025-04-16 14:55:31,472 - INFO - TEST CASE 7 Retry 2
2025-04-16 14:55:31,473 - INFO - ---------------
2025-04-16 14:55:31,474 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from theory_evaluation.models import ConsultantChat

@pytest.fixture(scope="module")
def setup_database():
    # Setup code for the database connection and session
    pass

def test_consultant_chat_table_columns(setup_database):
    inspector = inspect(ConsultantChat.__table__)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "email", "consultant_history", "modified_on", "project_id"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:31,477 - INFO - ---------------
2025-04-16 14:55:33,962 - INFO - TEST CASE 7 Retry 2 - Result - Failed
2025-04-16 14:55:33,962 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.85s
2025-04-16 14:55:33,963 - INFO - Failed after all retries for test case 7
2025-04-16 14:55:42,229 - INFO - TEST CASE 7 Retry 3
2025-04-16 14:55:42,230 - INFO - ---------------
2025-04-16 14:55:42,231 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from theory_evaluation.models import ConsultantChat

@pytest.fixture(scope="module")
def setup_database():
    # Setup code for the database connection and session
    pass

def test_consultant_chat_table_columns(setup_database):
    inspector = inspect(ConsultantChat.__table__)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "email", "consultant_history", "modified_on", "project_id"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:42,232 - INFO - ---------------
2025-04-16 14:55:44,351 - INFO - TEST CASE 7 Retry 3 - Result - Failed
2025-04-16 14:55:44,351 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.92s
2025-04-16 14:55:44,352 - INFO - Failed after all retries for test case 7
2025-04-16 14:55:44,352 - INFO - 

2025-04-16 14:55:44,353 - INFO - TEST CASE 8 Retry 0
2025-04-16 14:55:44,354 - INFO - ---------------
2025-04-16 14:55:44,354 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_mentor_chat_table_columns():
    inspector = inspect(MentorChat)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "user_id", "route", "sender_type", "message_content", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:44,355 - INFO - ---------------
2025-04-16 14:55:46,701 - INFO - TEST CASE 8 Retry 0 - Result - Failed
2025-04-16 14:55:46,702 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.24s
2025-04-16 14:55:48,815 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:55:48,816 - INFO - TEST CASE 8 Retry 1
2025-04-16 14:55:48,816 - INFO - ---------------
2025-04-16 14:55:48,817 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import MentorChat

def test_mentor_chat_table_columns():
    inspector = inspect(MentorChat)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "user_id", "route", "sender_type", "message_content", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:48,817 - INFO - ---------------
2025-04-16 14:55:51,987 - INFO - TEST CASE 8 Retry 1 - Result - Failed
2025-04-16 14:55:51,988 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.35s
2025-04-16 14:55:51,989 - INFO - Failed after all retries for test case 8
2025-04-16 14:55:54,492 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:55:54,493 - INFO - TEST CASE 8 Retry 2
2025-04-16 14:55:54,494 - INFO - ---------------
2025-04-16 14:55:54,495 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from sqlalchemy.orm import class_mapper
from theory_evaluation.models import MentorChat

def test_mentor_chat_table_columns():
    mapper = class_mapper(MentorChat)
    columns = [column.key for column in mapper.columns]
    expected_columns = [
        "id", "user_id", "route", "sender_type", "message_content", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:54,496 - INFO - ---------------
2025-04-16 14:55:56,620 - INFO - TEST CASE 8 Retry 2 - Result - Failed
2025-04-16 14:55:56,620 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.20s
2025-04-16 14:55:56,621 - INFO - Failed after all retries for test case 8
2025-04-16 14:55:58,216 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:55:58,217 - INFO - TEST CASE 8 Retry 3
2025-04-16 14:55:58,217 - INFO - ---------------
2025-04-16 14:55:58,218 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
import pytest
from sqlalchemy import inspect
from sqlalchemy.orm import class_mapper
from theory_evaluation.models import MentorChat

@pytest.fixture(scope="function")
def event_loop():
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()

def test_mentor_chat_table_columns():
    mapper = class_mapper(MentorChat)
    columns = [column.key for column in mapper.columns]
    expected_columns = [
        "id", "user_id", "route", "sender_type", "message_content", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:55:58,219 - INFO - ---------------
2025-04-16 14:56:00,818 - INFO - TEST CASE 8 Retry 3 - Result - Failed
2025-04-16 14:56:00,819 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.15s
2025-04-16 14:56:00,820 - INFO - Failed after all retries for test case 8
2025-04-16 14:56:00,821 - INFO - 

2025-04-16 14:56:00,821 - INFO - TEST CASE 9 Retry 0
2025-04-16 14:56:00,822 - INFO - ---------------
2025-04-16 14:56:00,823 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_curriculum_table_columns():
    inspector = inspect(Curriculum)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "question", "marking_scheme", "model_answer", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:56:00,824 - INFO - ---------------
2025-04-16 14:56:02,936 - INFO - TEST CASE 9 Retry 0 - Result - Failed
2025-04-16 14:56:02,938 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.07s
2025-04-16 14:56:04,784 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:56:04,785 - INFO - TEST CASE 9 Retry 1
2025-04-16 14:56:04,786 - INFO - ---------------
2025-04-16 14:56:04,787 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import Curriculum

def test_curriculum_table_columns():
    inspector = inspect(Curriculum)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "question", "marking_scheme", "model_answer", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:56:04,788 - INFO - ---------------
2025-04-16 14:56:07,460 - INFO - TEST CASE 9 Retry 1 - Result - Failed
2025-04-16 14:56:07,461 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.41s
2025-04-16 14:56:07,461 - INFO - Failed after all retries for test case 9
2025-04-16 14:56:08,811 - INFO - TEST CASE 9 Retry 2
2025-04-16 14:56:08,812 - INFO - ---------------
2025-04-16 14:56:08,813 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import Curriculum

def test_curriculum_table_columns():
    inspector = inspect(Curriculum)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "question", "marking_scheme", "model_answer", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:56:08,813 - INFO - ---------------
2025-04-16 14:56:11,729 - INFO - TEST CASE 9 Retry 2 - Result - Failed
2025-04-16 14:56:11,730 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.29s
2025-04-16 14:56:11,731 - INFO - Failed after all retries for test case 9
2025-04-16 14:56:15,438 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:56:15,439 - INFO - TEST CASE 9 Retry 3
2025-04-16 14:56:15,440 - INFO - ---------------
2025-04-16 14:56:15,440 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import Curriculum

def test_curriculum_table_columns():
    inspector = inspect(Curriculum.__table__)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "question", "marking_scheme", "model_answer", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:56:15,441 - INFO - ---------------
2025-04-16 14:56:17,843 - INFO - TEST CASE 9 Retry 3 - Result - Failed
2025-04-16 14:56:17,844 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.01s
2025-04-16 14:56:17,845 - INFO - Failed after all retries for test case 9
2025-04-16 14:56:17,845 - INFO - 

2025-04-16 14:56:17,845 - INFO - TEST CASE 10 Retry 0
2025-04-16 14:56:17,846 - INFO - ---------------
2025-04-16 14:56:17,847 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


def test_theory_eval_user_performance_table_columns():
    inspector = inspect(TheoryEvalUserPerformance)
    columns = inspector.columns.keys()
    expected_columns = [
        "id", "email", "question_id", "user_response", "llm_evaluation",
        "llm_score", "user_grade", "user_attempts", "llm_evaluation_status", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:56:17,848 - INFO - ---------------
2025-04-16 14:56:19,905 - INFO - TEST CASE 10 Retry 0 - Result - Failed
2025-04-16 14:56:19,906 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.87s
2025-04-16 14:56:21,779 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:56:21,780 - INFO - TEST CASE 10 Retry 1
2025-04-16 14:56:21,780 - INFO - ---------------
2025-04-16 14:56:21,781 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import TheoryEvalUserPerformance

def test_theory_eval_user_performance_table_columns():
    inspector = inspect(TheoryEvalUserPerformance)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "email", "question_id", "user_response", "llm_evaluation",
        "llm_score", "user_grade", "user_attempts", "llm_evaluation_status", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:56:21,782 - INFO - ---------------
2025-04-16 14:56:24,037 - INFO - TEST CASE 10 Retry 1 - Result - Failed
2025-04-16 14:56:24,038 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.02s
2025-04-16 14:56:24,040 - INFO - Failed after all retries for test case 10
2025-04-16 14:56:25,616 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:56:25,617 - INFO - TEST CASE 10 Retry 2
2025-04-16 14:56:25,618 - INFO - ---------------
2025-04-16 14:56:25,618 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import TheoryEvalUserPerformance

def test_theory_eval_user_performance_table_columns():
    inspector = inspect(TheoryEvalUserPerformance.__table__)
    columns = [column.name for column in inspector.columns]
    expected_columns = [
        "id", "email", "question_id", "user_response", "llm_evaluation",
        "llm_score", "user_grade", "user_attempts", "llm_evaluation_status", "timestamp"
    ]
    assert set(columns) == set(expected_columns)

2025-04-16 14:56:25,619 - INFO - ---------------
2025-04-16 14:56:28,012 - INFO - TEST CASE 10 Retry 2 - Result - Failed
2025-04-16 14:56:28,013 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 0.97s
2025-04-16 14:56:28,014 - INFO - Failed after all retries for test case 10
2025-04-16 14:56:30,138 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:56:30,140 - INFO - TEST CASE 10 Retry 3
2025-04-16 14:56:30,141 - INFO - ---------------
2025-04-16 14:56:30,141 - INFO - 
from sqlalchemy.dialects.postgresql import JSONB, UUID
from sqlalchemy import (
    Column,
    Integer,
    String,
    TIMESTAMP,
    create_engine,
    Float,
    ForeignKey,
    Text,
    UniqueConstraint,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid
from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
import pytest


# New Test Case
from sqlalchemy import inspect
from theory_evaluation.models import TheoryEvalUserPerformance

def test_theory_eval_user_performance_table_columns():
    columns = TheoryEvalUserPerformance.__table__.columns
    column_names = [column.name for column in columns]
    expected_columns = [
        "id", "email", "question_id", "user_response", "llm_evaluation",
        "llm_score", "user_grade", "user_attempts", "llm_evaluation_status", "timestamp"
    ]
    assert set(column_names) == set(expected_columns)

2025-04-16 14:56:30,142 - INFO - ---------------
2025-04-16 14:56:32,890 - INFO - TEST CASE 10 Retry 3 - Result - Failed
2025-04-16 14:56:32,891 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:16: in <module>
    from theory_evaluation.models import ConsultantChat, CurrentUserTable, Curriculum, MentorChat, Projects, SprintIssues, TheoryEvalUserPerformance, UserInfo, UserRepo, UserScoreLog
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.36s
2025-04-16 14:56:32,891 - INFO - Failed after all retries for test case 10
2025-04-16 14:56:32,892 - INFO - run_each_pytest_function_individually complete
2025-04-16 14:56:32,899 - INFO - End Processing file: theory_evaluation\models.py

2025-04-16 14:56:32,901 - INFO - 
Start Processing file: theory_evaluation\utils.py
2025-04-16 14:56:32,904 - INFO - Extraction of function and class start
2025-04-16 14:56:32,910 - INFO - extraction of function and class complete
2025-04-16 14:56:32,911 - INFO - Generate Unit Test Case starts
2025-04-16 14:56:32,912 - INFO - Extract unique import start
2025-04-16 14:56:34,664 - INFO - Extract unique import complete
2025-04-16 14:56:34,666 - INFO - Update relative import start
2025-04-16 14:56:34,667 - INFO - Update relative import complete
2025-04-16 14:56:50,808 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:56:50,810 - INFO - Generate Unit Test Case complete
2025-04-16 14:56:50,825 - INFO - run_each_pytest_function_individually start
2025-04-16 14:57:08,161 - INFO - Number of test case to process - 13
2025-04-16 14:57:08,162 - INFO - 

2025-04-16 14:57:08,163 - INFO - TEST CASE 1 Retry 0
2025-04-16 14:57:08,164 - INFO - ---------------
2025-04-16 14:57:08,164 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_init_db_session(monkeypatch):
    monkeypatch.setenv("DB_USER", "user")
    monkeypatch.setenv("DB_PASSWORD", "password")
    monkeypatch.setenv("DB_NAME", "dbname")
    monkeypatch.setenv("DB_HOST", "localhost")
    monkeypatch.setenv("DB_PORT", "5432")
    monkeypatch.setenv("SSL_MODE", "require")
    monkeypatch.setenv("ENVIRONMENT", "local")

2025-04-16 14:57:08,167 - INFO - ---------------
2025-04-16 14:57:13,016 - INFO - TEST CASE 1 Retry 0 - Result - Failed
2025-04-16 14:57:13,017 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.38s
2025-04-16 14:57:18,803 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:57:18,804 - INFO - TEST CASE 1 Retry 1
2025-04-16 14:57:18,805 - INFO - ---------------
2025-04-16 14:57:18,805 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import patch
from sqlalchemy.orm import scoped_session

def test_init_db_session(monkeypatch):
    monkeypatch.setenv("DB_USER", "user")
    monkeypatch.setenv("DB_PASSWORD", "password")
    monkeypatch.setenv("DB_NAME", "dbname")
    monkeypatch.setenv("DB_HOST", "localhost")
    monkeypatch.setenv("DB_PORT", "5432")
    monkeypatch.setenv("SSL_MODE", "require")
    monkeypatch.setenv("ENVIRONMENT", "local")

    with patch("theory_evaluation.create_engine") as mock_create_engine, \
         patch("theory_evaluation.scoped_session") as mock_scoped_session, \
         patch("theory_evaluation.sessionmaker") as mock_sessionmaker:

        mock_engine = mock_create_engine.return_value
        mock_session_factory = mock_sessionmaker.return_value
        mock_scoped_session.return_value = scoped_session(mock_session_factory)

        from theory_evaluation import init_db_session, SessionLocal

        init_db_session()

        mock_create_engine.assert_called_once_with(
            "postgresql+psycopg://user:password@localhost:5432/dbname"
        )
        mock_scoped_session.assert_called_once_with(mock_session_factory)
        assert SessionLocal is not None

2025-04-16 14:57:18,806 - INFO - ---------------
2025-04-16 14:57:21,672 - INFO - TEST CASE 1 Retry 1 - Result - Failed
2025-04-16 14:57:21,673 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.12s
2025-04-16 14:57:21,673 - INFO - Failed after all retries for test case 1
2025-04-16 14:57:28,644 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:57:28,646 - INFO - TEST CASE 1 Retry 2
2025-04-16 14:57:28,647 - INFO - ---------------
2025-04-16 14:57:28,649 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import patch
from sqlalchemy.orm import scoped_session

def test_init_db_session(monkeypatch):
    monkeypatch.setenv("DB_USER", "user")
    monkeypatch.setenv("DB_PASSWORD", "password")
    monkeypatch.setenv("DB_NAME", "dbname")
    monkeypatch.setenv("DB_HOST", "localhost")
    monkeypatch.setenv("DB_PORT", "5432")
    monkeypatch.setenv("SSL_MODE", "require")
    monkeypatch.setenv("ENVIRONMENT", "local")

    with patch("theory_evaluation.create_engine") as mock_create_engine, \
         patch("theory_evaluation.scoped_session") as mock_scoped_session, \
         patch("theory_evaluation.sessionmaker") as mock_sessionmaker:

        mock_engine = mock_create_engine.return_value
        mock_session_factory = mock_sessionmaker.return_value
        mock_scoped_session.return_value = scoped_session(mock_session_factory)

        from theory_evaluation import init_db_session, SessionLocal

        init_db_session()

        mock_create_engine.assert_called_once_with(
            "postgresql+psycopg://user:password@localhost:5432/dbname"
        )
        mock_scoped_session.assert_called_once_with(mock_session_factory)
        assert SessionLocal is not None

2025-04-16 14:57:28,652 - INFO - ---------------
2025-04-16 14:57:33,307 - INFO - TEST CASE 1 Retry 2 - Result - Failed
2025-04-16 14:57:33,308 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.15s
2025-04-16 14:57:33,308 - INFO - Failed after all retries for test case 1
2025-04-16 14:57:37,872 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:57:37,872 - INFO - TEST CASE 1 Retry 3
2025-04-16 14:57:37,873 - INFO - ---------------
2025-04-16 14:57:37,873 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import patch
from sqlalchemy.orm import scoped_session

@pytest.fixture(scope="function", autouse=True)
def set_asyncio_default_fixture_loop_scope(pytestconfig):
    pytestconfig.option.asyncio_default_fixture_loop_scope = "function"

def test_init_db_session(monkeypatch):
    monkeypatch.setenv("DB_USER", "user")
    monkeypatch.setenv("DB_PASSWORD", "password")
    monkeypatch.setenv("DB_NAME", "dbname")
    monkeypatch.setenv("DB_HOST", "localhost")
    monkeypatch.setenv("DB_PORT", "5432")
    monkeypatch.setenv("SSL_MODE", "require")
    monkeypatch.setenv("ENVIRONMENT", "local")

    with patch("theory_evaluation.create_engine") as mock_create_engine, \
         patch("theory_evaluation.scoped_session") as mock_scoped_session, \
         patch("theory_evaluation.sessionmaker") as mock_sessionmaker:

        mock_engine = mock_create_engine.return_value
        mock_session_factory = mock_sessionmaker.return_value
        mock_scoped_session.return_value = scoped_session(mock_session_factory)

        from theory_evaluation import init_db_session, SessionLocal

        init_db_session()

        mock_create_engine.assert_called_once_with(
            "postgresql+psycopg://user:password@localhost:5432/dbname"
        )
        mock_scoped_session.assert_called_once_with(mock_session_factory)
        assert SessionLocal is not None

2025-04-16 14:57:37,873 - INFO - ---------------
2025-04-16 14:57:40,881 - INFO - TEST CASE 1 Retry 3 - Result - Failed
2025-04-16 14:57:40,881 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.27s
2025-04-16 14:57:40,881 - INFO - Failed after all retries for test case 1
2025-04-16 14:57:40,881 - INFO - 

2025-04-16 14:57:40,881 - INFO - TEST CASE 2 Retry 0
2025-04-16 14:57:40,882 - INFO - ---------------
2025-04-16 14:57:40,882 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_validate_user_exists(mock_db_session):
    mock_user = MagicMock()
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_user

2025-04-16 14:57:40,882 - INFO - ---------------
2025-04-16 14:57:43,533 - INFO - TEST CASE 2 Retry 0 - Result - Failed
2025-04-16 14:57:43,534 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.32s
2025-04-16 14:57:50,641 - INFO - TEST CASE 2 Retry 1
2025-04-16 14:57:50,643 - INFO - ---------------
2025-04-16 14:57:50,647 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
import pytest
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from your_module import validate_user

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_validate_user_exists(mock_db_session):
    mock_user = MagicMock()
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_user
    result = validate_user("test@example.com")
    assert result is True

def test_validate_user_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.first.return_value = None
    result = validate_user("test@example.com")
    assert result is False

def test_validate_user_operational_error(mock_db_session):
    mock_db_session.query.side_effect = OperationalError("Operational error", None, None)
    result = validate_user("test@example.com")
    assert result is None

def test_validate_user_sqlalchemy_error(mock_db_session):
    mock_db_session.query.side_effect = SQLAlchemyError("SQLAlchemy error")
    result = validate_user("test@example.com")
    assert result is None

def test_validate_user_unexpected_error(mock_db_session):
    mock_db_session.query.side_effect = Exception("Unexpected error")
    result = validate_user("test@example.com")
    assert result is None

2025-04-16 14:57:50,648 - INFO - ---------------
2025-04-16 14:57:54,465 - INFO - TEST CASE 2 Retry 1 - Result - Failed
2025-04-16 14:57:54,466 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.43s
2025-04-16 14:57:54,467 - INFO - Failed after all retries for test case 2
2025-04-16 14:58:03,071 - INFO - TEST CASE 2 Retry 2
2025-04-16 14:58:03,072 - INFO - ---------------
2025-04-16 14:58:03,073 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
import pytest
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from . import validate_user

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_validate_user_exists(mock_db_session):
    mock_user = MagicMock()
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_user
    result = validate_user("test@example.com")
    assert result is True

def test_validate_user_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.first.return_value = None
    result = validate_user("test@example.com")
    assert result is False

def test_validate_user_operational_error(mock_db_session):
    mock_db_session.query.side_effect = OperationalError("Operational error", None, None)
    result = validate_user("test@example.com")
    assert result is None

def test_validate_user_sqlalchemy_error(mock_db_session):
    mock_db_session.query.side_effect = SQLAlchemyError("SQLAlchemy error")
    result = validate_user("test@example.com")
    assert result is None

def test_validate_user_unexpected_error(mock_db_session):
    mock_db_session.query.side_effect = Exception("Unexpected error")
    result = validate_user("test@example.com")
    assert result is None

2025-04-16 14:58:03,074 - INFO - ---------------
2025-04-16 14:58:06,252 - INFO - TEST CASE 2 Retry 2 - Result - Failed
2025-04-16 14:58:06,252 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.74s
2025-04-16 14:58:06,253 - INFO - Failed after all retries for test case 2
2025-04-16 14:58:10,188 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:58:10,191 - INFO - TEST CASE 2 Retry 3
2025-04-16 14:58:10,192 - INFO - ---------------
2025-04-16 14:58:10,194 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
import pytest
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from your_module_name import validate_user  # Replace 'your_module_name' with the actual module name

@pytest.fixture
def mock_db_session(monkeypatch):
    mock_session = MagicMock()
    monkeypatch.setattr('your_module_name.get_db', lambda: mock_session)
    return mock_session

def test_validate_user_exists(mock_db_session):
    mock_user = MagicMock()
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_user
    result = validate_user("test@example.com")
    assert result is True

def test_validate_user_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.first.return_value = None
    result = validate_user("test@example.com")
    assert result is False

def test_validate_user_operational_error(mock_db_session):
    mock_db_session.query.side_effect = OperationalError("Operational error", None, None)
    result = validate_user("test@example.com")
    assert result is None

def test_validate_user_sqlalchemy_error(mock_db_session):
    mock_db_session.query.side_effect = SQLAlchemyError("SQLAlchemy error")
    result = validate_user("test@example.com")
    assert result is None

def test_validate_user_unexpected_error(mock_db_session):
    mock_db_session.query.side_effect = Exception("Unexpected error")
    result = validate_user("test@example.com")
    assert result is None

2025-04-16 14:58:10,195 - INFO - ---------------
2025-04-16 14:58:13,587 - INFO - TEST CASE 2 Retry 3 - Result - Failed
2025-04-16 14:58:13,588 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.21s
2025-04-16 14:58:13,589 - INFO - Failed after all retries for test case 2
2025-04-16 14:58:13,590 - INFO - 

2025-04-16 14:58:13,591 - INFO - TEST CASE 3 Retry 0
2025-04-16 14:58:13,591 - INFO - ---------------
2025-04-16 14:58:13,592 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_validate_user_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.first.return_value = None

2025-04-16 14:58:13,593 - INFO - ---------------
2025-04-16 14:58:16,782 - INFO - TEST CASE 3 Retry 0 - Result - Failed
2025-04-16 14:58:16,783 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.40s
2025-04-16 14:58:19,874 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:58:19,875 - INFO - TEST CASE 3 Retry 1
2025-04-16 14:58:19,876 - INFO - ---------------
2025-04-16 14:58:19,876 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
from your_module import validate_user

def test_validate_user_not_exists():
    mock_db_session = MagicMock()
    mock_db_session.query.return_value.filter.return_value.first.return_value = None

    with patch('your_module.get_db', return_value=mock_db_session):
        result = validate_user("nonexistent@example.com")
    
    assert result is False

2025-04-16 14:58:19,877 - INFO - ---------------
2025-04-16 14:58:23,623 - INFO - TEST CASE 3 Retry 1 - Result - Failed
2025-04-16 14:58:23,624 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.98s
2025-04-16 14:58:23,625 - INFO - Failed after all retries for test case 3
2025-04-16 14:58:26,166 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:58:26,167 - INFO - TEST CASE 3 Retry 2
2025-04-16 14:58:26,168 - INFO - ---------------
2025-04-16 14:58:26,169 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock, patch
from your_module import validate_user

def test_validate_user_not_exists():
    mock_db_session = MagicMock()
    mock_db_session.query.return_value.filter.return_value.first.return_value = None

    with patch('your_module.get_db', return_value=mock_db_session):
        result = validate_user("nonexistent@example.com")
    
    assert result is False

2025-04-16 14:58:26,171 - INFO - ---------------
2025-04-16 14:58:30,927 - INFO - TEST CASE 3 Retry 2 - Result - Failed
2025-04-16 14:58:30,928 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.08s
2025-04-16 14:58:30,929 - INFO - Failed after all retries for test case 3
2025-04-16 14:58:32,762 - INFO - TEST CASE 3 Retry 3
2025-04-16 14:58:32,763 - INFO - ---------------
2025-04-16 14:58:32,765 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock, patch
from your_module import validate_user

def test_validate_user_not_exists():
    mock_db_session = MagicMock()
    mock_db_session.query.return_value.filter.return_value.first.return_value = None

    with patch('your_module.get_db', return_value=mock_db_session):
        result = validate_user("nonexistent@example.com")
    
    assert result is False

2025-04-16 14:58:32,766 - INFO - ---------------
2025-04-16 14:58:35,405 - INFO - TEST CASE 3 Retry 3 - Result - Failed
2025-04-16 14:58:35,406 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.06s
2025-04-16 14:58:35,406 - INFO - Failed after all retries for test case 3
2025-04-16 14:58:35,407 - INFO - 

2025-04-16 14:58:35,407 - INFO - TEST CASE 4 Retry 0
2025-04-16 14:58:35,407 - INFO - ---------------
2025-04-16 14:58:35,408 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_validate_user_operational_error(mock_db_session):
    mock_db_session.query.side_effect = OperationalError("error", "params", "orig")

2025-04-16 14:58:35,408 - INFO - ---------------
2025-04-16 14:58:39,088 - INFO - TEST CASE 4 Retry 0 - Result - Failed
2025-04-16 14:58:39,088 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.76s
2025-04-16 14:58:43,176 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:58:43,177 - INFO - TEST CASE 4 Retry 1
2025-04-16 14:58:43,177 - INFO - ---------------
2025-04-16 14:58:43,178 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import patch, MagicMock
from sqlalchemy.exc import OperationalError
from your_module import validate_user  # Replace 'your_module' with the actual module name

def test_validate_user_operational_error():
    with patch('your_module.get_db') as mock_get_db:
        mock_db_session = MagicMock()
        mock_db_session.query.side_effect = OperationalError("error", "params", "orig")
        mock_get_db.return_value.__enter__.return_value = mock_db_session

        result = validate_user("test@example.com")
        assert result is None

2025-04-16 14:58:43,179 - INFO - ---------------
2025-04-16 14:58:46,428 - INFO - TEST CASE 4 Retry 1 - Result - Failed
2025-04-16 14:58:46,429 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.47s
2025-04-16 14:58:46,430 - INFO - Failed after all retries for test case 4
2025-04-16 14:58:48,607 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:58:48,609 - INFO - TEST CASE 4 Retry 2
2025-04-16 14:58:48,610 - INFO - ---------------
2025-04-16 14:58:48,611 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import patch, MagicMock
from sqlalchemy.exc import OperationalError
from your_module import validate_user  # Replace 'your_module' with the actual module name

def test_validate_user_operational_error():
    with patch('your_module.get_db') as mock_get_db:
        mock_db_session = MagicMock()
        mock_db_session.query.side_effect = OperationalError("error", "params", "orig")
        mock_get_db.return_value.__enter__.return_value = mock_db_session

        result = validate_user("test@example.com")
        assert result is None

2025-04-16 14:58:48,612 - INFO - ---------------
2025-04-16 14:58:51,274 - INFO - TEST CASE 4 Retry 2 - Result - Failed
2025-04-16 14:58:51,274 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.24s
2025-04-16 14:58:51,274 - INFO - Failed after all retries for test case 4
2025-04-16 14:58:53,073 - INFO - TEST CASE 4 Retry 3
2025-04-16 14:58:53,075 - INFO - ---------------
2025-04-16 14:58:53,082 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import patch, MagicMock
from sqlalchemy.exc import OperationalError
from your_module import validate_user  # Replace 'your_module' with the actual module name

def test_validate_user_operational_error():
    with patch('your_module.get_db') as mock_get_db:
        mock_db_session = MagicMock()
        mock_db_session.query.side_effect = OperationalError("error", "params", "orig")
        mock_get_db.return_value.__enter__.return_value = mock_db_session

        result = validate_user("test@example.com")
        assert result is None

2025-04-16 14:58:53,083 - INFO - ---------------
2025-04-16 14:58:56,405 - INFO - TEST CASE 4 Retry 3 - Result - Failed
2025-04-16 14:58:56,405 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.51s
2025-04-16 14:58:56,406 - INFO - Failed after all retries for test case 4
2025-04-16 14:58:56,407 - INFO - 

2025-04-16 14:58:56,407 - INFO - TEST CASE 5 Retry 0
2025-04-16 14:58:56,408 - INFO - ---------------
2025-04-16 14:58:56,408 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_get_marking_scheme_exists(mock_db_session):
    mock_curriculum = MagicMock()
    mock_curriculum.question = "Question"
    mock_curriculum.marking_scheme = "Scheme"
    mock_curriculum.model_answer = "Answer"
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_curriculum

2025-04-16 14:58:56,409 - INFO - ---------------
2025-04-16 14:59:00,710 - INFO - TEST CASE 5 Retry 0 - Result - Failed
2025-04-16 14:59:00,711 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.63s
2025-04-16 14:59:05,948 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:59:05,949 - INFO - TEST CASE 5 Retry 1
2025-04-16 14:59:05,950 - INFO - ---------------
2025-04-16 14:59:05,950 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock, patch
from uuid import uuid4
from your_module import get_marking_scheme  # Replace 'your_module' with the actual module name

@patch('your_module.get_db')  # Replace 'your_module' with the actual module name
def test_get_marking_scheme_exists(mock_get_db):
    mock_db_session = MagicMock()
    mock_curriculum = MagicMock()
    mock_curriculum.question = "Question"
    mock_curriculum.marking_scheme = "Scheme"
    mock_curriculum.model_answer = "Answer"
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_curriculum
    mock_get_db.return_value.__enter__.return_value = mock_db_session

    uuid = uuid4()
    question, scheme, answer = get_marking_scheme(uuid)

    assert question == "Question"
    assert scheme == "Scheme"
    assert answer == "Answer"

2025-04-16 14:59:05,953 - INFO - ---------------
2025-04-16 14:59:09,462 - INFO - TEST CASE 5 Retry 1 - Result - Failed
2025-04-16 14:59:09,464 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.50s
2025-04-16 14:59:09,465 - INFO - Failed after all retries for test case 5
2025-04-16 14:59:12,678 - INFO - TEST CASE 5 Retry 2
2025-04-16 14:59:12,680 - INFO - ---------------
2025-04-16 14:59:12,680 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock, patch
from uuid import uuid4
from your_module import get_marking_scheme  # Replace 'your_module' with the actual module name

@patch('your_module.get_db')  # Replace 'your_module' with the actual module name
def test_get_marking_scheme_exists(mock_get_db):
    mock_db_session = MagicMock()
    mock_curriculum = MagicMock()
    mock_curriculum.question = "Question"
    mock_curriculum.marking_scheme = "Scheme"
    mock_curriculum.model_answer = "Answer"
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_curriculum
    mock_get_db.return_value.__enter__.return_value = mock_db_session

    uuid = uuid4()
    question, scheme, answer = get_marking_scheme(uuid)

    assert question == "Question"
    assert scheme == "Scheme"
    assert answer == "Answer"

2025-04-16 14:59:12,681 - INFO - ---------------
2025-04-16 14:59:16,294 - INFO - TEST CASE 5 Retry 2 - Result - Failed
2025-04-16 14:59:16,295 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.96s
2025-04-16 14:59:16,296 - INFO - Failed after all retries for test case 5
2025-04-16 14:59:19,498 - INFO - TEST CASE 5 Retry 3
2025-04-16 14:59:19,499 - INFO - ---------------
2025-04-16 14:59:19,502 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock, patch
from uuid import uuid4
from your_module import get_marking_scheme  # Replace 'your_module' with the actual module name

@patch('your_module.get_db')  # Replace 'your_module' with the actual module name
def test_get_marking_scheme_exists(mock_get_db):
    mock_db_session = MagicMock()
    mock_curriculum = MagicMock()
    mock_curriculum.question = "Question"
    mock_curriculum.marking_scheme = "Scheme"
    mock_curriculum.model_answer = "Answer"
    mock_db_session.query.return_value.filter.return_value.first.return_value = mock_curriculum
    mock_get_db.return_value.__enter__.return_value = mock_db_session

    uuid = uuid4()
    question, scheme, answer = get_marking_scheme(uuid)

    assert question == "Question"
    assert scheme == "Scheme"
    assert answer == "Answer"

2025-04-16 14:59:19,505 - INFO - ---------------
2025-04-16 14:59:23,800 - INFO - TEST CASE 5 Retry 3 - Result - Failed
2025-04-16 14:59:23,802 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.63s
2025-04-16 14:59:23,803 - INFO - Failed after all retries for test case 5
2025-04-16 14:59:23,804 - INFO - 

2025-04-16 14:59:23,805 - INFO - TEST CASE 6 Retry 0
2025-04-16 14:59:23,805 - INFO - ---------------
2025-04-16 14:59:23,806 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_get_marking_scheme_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.first.return_value = None

2025-04-16 14:59:23,807 - INFO - ---------------
2025-04-16 14:59:26,986 - INFO - TEST CASE 6 Retry 0 - Result - Failed
2025-04-16 14:59:26,986 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.48s
2025-04-16 14:59:30,421 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:59:30,423 - INFO - TEST CASE 6 Retry 1
2025-04-16 14:59:30,423 - INFO - ---------------
2025-04-16 14:59:30,424 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import MagicMock
from uuid import UUID
from your_module import get_marking_scheme

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_get_marking_scheme_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.first.return_value = None
    uuid = UUID("12345678-1234-5678-1234-567812345678")
    question, marking_scheme, model_answer = get_marking_scheme(uuid)
    assert question is None
    assert marking_scheme is None
    assert model_answer is None

2025-04-16 14:59:30,426 - INFO - ---------------
2025-04-16 14:59:34,132 - INFO - TEST CASE 6 Retry 1 - Result - Failed
2025-04-16 14:59:34,133 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.59s
2025-04-16 14:59:34,134 - INFO - Failed after all retries for test case 6
2025-04-16 14:59:37,998 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:59:38,001 - INFO - TEST CASE 6 Retry 2
2025-04-16 14:59:38,003 - INFO - ---------------
2025-04-16 14:59:38,004 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import MagicMock
from uuid import UUID
from your_module import get_marking_scheme

@pytest.fixture
def mock_db_session(monkeypatch):
    mock_session = MagicMock()
    monkeypatch.setattr('your_module.get_db', lambda: mock_session)
    return mock_session

def test_get_marking_scheme_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.first.return_value = None
    uuid = UUID("12345678-1234-5678-1234-567812345678")
    question, marking_scheme, model_answer = get_marking_scheme(uuid)
    assert question is None
    assert marking_scheme is None
    assert model_answer is None

2025-04-16 14:59:38,010 - INFO - ---------------
2025-04-16 14:59:42,428 - INFO - TEST CASE 6 Retry 2 - Result - Failed
2025-04-16 14:59:42,429 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.63s
2025-04-16 14:59:42,430 - INFO - Failed after all retries for test case 6
2025-04-16 14:59:45,246 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:59:45,247 - INFO - TEST CASE 6 Retry 3
2025-04-16 14:59:45,248 - INFO - ---------------
2025-04-16 14:59:45,249 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import MagicMock
from uuid import UUID
from your_module import get_marking_scheme

@pytest.fixture
def mock_db_session(monkeypatch):
    mock_session = MagicMock()
    monkeypatch.setattr('your_module.SessionLocal', lambda: mock_session)
    return mock_session

def test_get_marking_scheme_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.first.return_value = None
    uuid = UUID("12345678-1234-5678-1234-567812345678")
    question, marking_scheme, model_answer = get_marking_scheme(uuid)
    assert question is None
    assert marking_scheme is None
    assert model_answer is None

2025-04-16 14:59:45,250 - INFO - ---------------
2025-04-16 14:59:48,332 - INFO - TEST CASE 6 Retry 3 - Result - Failed
2025-04-16 14:59:48,333 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.42s
2025-04-16 14:59:48,333 - INFO - Failed after all retries for test case 6
2025-04-16 14:59:48,334 - INFO - 

2025-04-16 14:59:48,334 - INFO - TEST CASE 7 Retry 0
2025-04-16 14:59:48,335 - INFO - ---------------
2025-04-16 14:59:48,335 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_get_user_performance_exists(mock_db_session):
    mock_performance = MagicMock()
    mock_performance.user_attempts = 2
    mock_performance.llm_evaluation = "Evaluation"
    mock_performance.user_grade = "Grade"
    mock_performance.llm_evaluation_status = 1
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

2025-04-16 14:59:48,336 - INFO - ---------------
2025-04-16 14:59:52,137 - INFO - TEST CASE 7 Retry 0 - Result - Failed
2025-04-16 14:59:52,138 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.76s
2025-04-16 14:59:56,751 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 14:59:56,753 - INFO - TEST CASE 7 Retry 1
2025-04-16 14:59:56,754 - INFO - ---------------
2025-04-16 14:59:56,755 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
from uuid import uuid4
import pydantic

def test_get_user_performance_exists(mock_db_session):
    mock_performance = MagicMock()
    mock_performance.user_attempts = 2
    mock_performance.llm_evaluation = "Evaluation"
    mock_performance.user_grade = "Grade"
    mock_performance.llm_evaluation_status = 1
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = pydantic.EmailStr("test@example.com")
    question_id = uuid4()

    result = get_user_performance(email, question_id)

    assert result == (2, "Evaluation", "Grade", 1)

2025-04-16 14:59:56,756 - INFO - ---------------
2025-04-16 15:00:01,790 - INFO - TEST CASE 7 Retry 1 - Result - Failed
2025-04-16 15:00:01,791 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 2.24s
2025-04-16 15:00:01,791 - INFO - Failed after all retries for test case 7
2025-04-16 15:00:08,367 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:00:08,368 - INFO - TEST CASE 7 Retry 2
2025-04-16 15:00:08,368 - INFO - ---------------
2025-04-16 15:00:08,368 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock, patch
from uuid import uuid4
import pydantic
import pytest
from your_module import get_user_performance  # Replace 'your_module' with the actual module name

@pytest.fixture
def mock_db_session():
    with patch('your_module.get_db') as mock_get_db:  # Replace 'your_module' with the actual module name
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_get_user_performance_exists(mock_db_session):
    mock_performance = MagicMock()
    mock_performance.user_attempts = 2
    mock_performance.llm_evaluation = "Evaluation"
    mock_performance.user_grade = "Grade"
    mock_performance.llm_evaluation_status = 1
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = pydantic.EmailStr("test@example.com")
    question_id = uuid4()

    result = get_user_performance(email, question_id)

    assert result == (2, "Evaluation", "Grade", 1)

2025-04-16 15:00:08,369 - INFO - ---------------
2025-04-16 15:00:12,055 - INFO - TEST CASE 7 Retry 2 - Result - Failed
2025-04-16 15:00:12,055 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.56s
2025-04-16 15:00:12,056 - INFO - Failed after all retries for test case 7
2025-04-16 15:00:15,650 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:00:15,651 - INFO - TEST CASE 7 Retry 3
2025-04-16 15:00:15,652 - INFO - ---------------
2025-04-16 15:00:15,652 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock, patch
from uuid import uuid4
import pydantic
import pytest
from your_module import get_user_performance  # Replace 'your_module' with the actual module name

@pytest.fixture
def mock_db_session():
    with patch('your_module.get_db') as mock_get_db:  # Replace 'your_module' with the actual module name
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_get_user_performance_exists(mock_db_session):
    mock_performance = MagicMock()
    mock_performance.user_attempts = 2
    mock_performance.llm_evaluation = "Evaluation"
    mock_performance.user_grade = "Grade"
    mock_performance.llm_evaluation_status = 1
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = pydantic.EmailStr("test@example.com")
    question_id = uuid4()

    result = get_user_performance(email, question_id)

    assert result == (2, "Evaluation", "Grade", 1)

2025-04-16 15:00:15,653 - INFO - ---------------
2025-04-16 15:00:17,826 - INFO - TEST CASE 7 Retry 3 - Result - Failed
2025-04-16 15:00:17,826 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.05s
2025-04-16 15:00:17,826 - INFO - Failed after all retries for test case 7
2025-04-16 15:00:17,826 - INFO - 

2025-04-16 15:00:17,826 - INFO - TEST CASE 8 Retry 0
2025-04-16 15:00:17,827 - INFO - ---------------
2025-04-16 15:00:17,827 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_get_user_performance_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = None

2025-04-16 15:00:17,827 - INFO - ---------------
2025-04-16 15:00:20,133 - INFO - TEST CASE 8 Retry 0 - Result - Failed
2025-04-16 15:00:20,133 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.15s
2025-04-16 15:00:22,436 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:00:22,437 - INFO - TEST CASE 8 Retry 1
2025-04-16 15:00:22,437 - INFO - ---------------
2025-04-16 15:00:22,437 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
import pytest
from sqlalchemy.exc import OperationalError, SQLAlchemyError
from your_module import get_user_performance  # Replace with the actual module name

@pytest.fixture
def mock_db_session():
    mock_session = MagicMock()
    return mock_session

def test_get_user_performance_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = None

    with pytest.raises(Exception) as excinfo:
        get_user_performance("nonexistent@example.com", "some-uuid", mock_db_session)

    assert "An unexpected error occurred" in str(excinfo.value)

2025-04-16 15:00:22,437 - INFO - ---------------
2025-04-16 15:00:25,134 - INFO - TEST CASE 8 Retry 1 - Result - Failed
2025-04-16 15:00:25,135 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.21s
2025-04-16 15:00:25,135 - INFO - Failed after all retries for test case 8
2025-04-16 15:00:27,410 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:00:27,410 - INFO - TEST CASE 8 Retry 2
2025-04-16 15:00:27,411 - INFO - ---------------
2025-04-16 15:00:27,411 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
import pytest
from sqlalchemy.exc import OperationalError, SQLAlchemyError
from your_module import get_user_performance  # Replace with the actual module name

@pytest.fixture
def mock_db_session():
    mock_session = MagicMock()
    return mock_session

def test_get_user_performance_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = None

    with pytest.raises(Exception) as excinfo:
        get_user_performance("nonexistent@example.com", "some-uuid", mock_db_session=mock_db_session)

    assert "An unexpected error occurred" in str(excinfo.value)

2025-04-16 15:00:27,411 - INFO - ---------------
2025-04-16 15:00:30,181 - INFO - TEST CASE 8 Retry 2 - Result - Failed
2025-04-16 15:00:30,181 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.30s
2025-04-16 15:00:30,181 - INFO - Failed after all retries for test case 8
2025-04-16 15:00:32,842 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:00:32,842 - INFO - TEST CASE 8 Retry 3
2025-04-16 15:00:32,842 - INFO - ---------------
2025-04-16 15:00:32,843 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
import pytest
from sqlalchemy.exc import OperationalError, SQLAlchemyError
from your_module import get_user_performance  # Replace with the actual module name

@pytest.fixture
def mock_db_session():
    mock_session = MagicMock()
    return mock_session

def test_get_user_performance_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = None

    result = get_user_performance("nonexistent@example.com", "some-uuid", mock_db_session=mock_db_session)

    assert result == (0, "An unexpected error occurred. Please try again.", "No grade available.", 0)

2025-04-16 15:00:32,843 - INFO - ---------------
2025-04-16 15:00:35,428 - INFO - TEST CASE 8 Retry 3 - Result - Failed
2025-04-16 15:00:35,429 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.33s
2025-04-16 15:00:35,429 - INFO - Failed after all retries for test case 8
2025-04-16 15:00:35,429 - INFO - 

2025-04-16 15:00:35,429 - INFO - TEST CASE 9 Retry 0
2025-04-16 15:00:35,429 - INFO - ---------------
2025-04-16 15:00:35,429 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_manage_user_performance_create_new_attempt(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = None

2025-04-16 15:00:35,429 - INFO - ---------------
2025-04-16 15:00:37,703 - INFO - TEST CASE 9 Retry 0 - Result - Failed
2025-04-16 15:00:37,703 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.14s
2025-04-16 15:00:41,380 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:00:41,381 - INFO - TEST CASE 9 Retry 1
2025-04-16 15:00:41,381 - INFO - ---------------
2025-04-16 15:00:41,381 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import patch
from uuid import uuid4
import pytest
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from theory_evaluation import manage_user_performance

@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.get_db') as mock_get_db:
        mock_session = mock_get_db.return_value.__enter__.return_value
        yield mock_session

def test_manage_user_performance_create_new_attempt(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = None

    email = "test@example.com"
    question_id = uuid4()
    user_response = "Sample response"

    result = manage_user_performance(
        mode=0,
        email=email,
        question_id=question_id,
        user_response=user_response
    )

    assert result is True
    mock_db_session.add.assert_called_once()
    mock_db_session.commit.assert_called_once()

2025-04-16 15:00:41,381 - INFO - ---------------
2025-04-16 15:00:44,100 - INFO - TEST CASE 9 Retry 1 - Result - Failed
2025-04-16 15:00:44,101 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.27s
2025-04-16 15:00:44,101 - INFO - Failed after all retries for test case 9
2025-04-16 15:00:47,321 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:00:47,321 - INFO - TEST CASE 9 Retry 2
2025-04-16 15:00:47,322 - INFO - ---------------
2025-04-16 15:00:47,322 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import patch
from uuid import uuid4
import pytest
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from theory_evaluation.manage_user_performance import manage_user_performance

@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.get_db') as mock_get_db:
        mock_session = mock_get_db.return_value.__enter__.return_value
        yield mock_session

def test_manage_user_performance_create_new_attempt(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = None

    email = "test@example.com"
    question_id = uuid4()
    user_response = "Sample response"

    result = manage_user_performance(
        mode=0,
        email=email,
        question_id=question_id,
        user_response=user_response
    )

    assert result is True
    mock_db_session.add.assert_called_once()
    mock_db_session.commit.assert_called_once()

2025-04-16 15:00:47,322 - INFO - ---------------
2025-04-16 15:00:51,063 - INFO - TEST CASE 9 Retry 2 - Result - Failed
2025-04-16 15:00:51,063 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.92s
2025-04-16 15:00:51,063 - INFO - Failed after all retries for test case 9
2025-04-16 15:01:05,389 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:01:05,390 - INFO - TEST CASE 9 Retry 3
2025-04-16 15:01:05,390 - INFO - ---------------
2025-04-16 15:01:05,391 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import patch
from uuid import uuid4
import pytest
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from theory_evaluation.manage_user_performance import manage_user_performance

@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.manage_user_performance.get_db') as mock_get_db:
        mock_session = mock_get_db.return_value.__enter__.return_value
        yield mock_session

def test_manage_user_performance_create_new_attempt(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = None

    email = "test@example.com"
    question_id = uuid4()
    user_response = "Sample response"

    result = manage_user_performance(
        mode=0,
        email=email,
        question_id=question_id,
        user_response=user_response
    )

    assert result is True
    mock_db_session.add.assert_called_once()
    mock_db_session.commit.assert_called_once()

2025-04-16 15:01:05,391 - INFO - ---------------
2025-04-16 15:01:07,831 - INFO - TEST CASE 9 Retry 3 - Result - Failed
2025-04-16 15:01:07,831 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.20s
2025-04-16 15:01:07,831 - INFO - Failed after all retries for test case 9
2025-04-16 15:01:07,831 - INFO - 

2025-04-16 15:01:07,831 - INFO - TEST CASE 10 Retry 0
2025-04-16 15:01:07,831 - INFO - ---------------
2025-04-16 15:01:07,831 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_manage_user_performance_update_performance(mock_db_session):
    mock_performance = MagicMock()
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

2025-04-16 15:01:07,831 - INFO - ---------------
2025-04-16 15:01:11,259 - INFO - TEST CASE 10 Retry 0 - Result - Failed
2025-04-16 15:01:11,260 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.98s
2025-04-16 15:01:16,097 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:01:16,097 - INFO - TEST CASE 10 Retry 1
2025-04-16 15:01:16,098 - INFO - ---------------
2025-04-16 15:01:16,098 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
from theory_evaluation import manage_user_performance

def test_manage_user_performance_update_performance(mock_db_session):
    mock_performance = MagicMock()
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = "test@example.com"
    question_id = UUID("12345678-1234-5678-1234-567812345678")
    llm_evaluation = "Evaluation"
    llm_score = 90
    user_grade = "Pass"

    result = manage_user_performance(
        mode=1,
        email=email,
        question_id=question_id,
        llm_evaluation=llm_evaluation,
        llm_score=llm_score,
        user_grade=user_grade,
        max_retries=3,
        retry_delay=2
    )

    assert result is True
    assert mock_performance.llm_evaluation == llm_evaluation
    assert mock_performance.llm_score == llm_score
    assert mock_performance.user_grade == user_grade
    assert mock_performance.llm_evaluation_status == 2

2025-04-16 15:01:16,098 - INFO - ---------------
2025-04-16 15:01:18,872 - INFO - TEST CASE 10 Retry 1 - Result - Failed
2025-04-16 15:01:18,873 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.44s
2025-04-16 15:01:18,873 - INFO - Failed after all retries for test case 10
2025-04-16 15:01:23,382 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:01:23,383 - INFO - TEST CASE 10 Retry 2
2025-04-16 15:01:23,383 - INFO - ---------------
2025-04-16 15:01:23,384 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
from uuid import UUID
from theory_evaluation import manage_user_performance

def test_manage_user_performance_update_performance():
    mock_db_session = MagicMock()
    mock_performance = MagicMock()
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = "test@example.com"
    question_id = UUID("12345678-1234-5678-1234-567812345678")
    llm_evaluation = "Evaluation"
    llm_score = 90
    user_grade = "Pass"

    result = manage_user_performance(
        mode=1,
        email=email,
        question_id=question_id,
        llm_evaluation=llm_evaluation,
        llm_score=llm_score,
        user_grade=user_grade,
        max_retries=3,
        retry_delay=2
    )

    assert result is True
    assert mock_performance.llm_evaluation == llm_evaluation
    assert mock_performance.llm_score == llm_score
    assert mock_performance.user_grade == user_grade
    assert mock_performance.llm_evaluation_status == 2

2025-04-16 15:01:23,384 - INFO - ---------------
2025-04-16 15:01:25,842 - INFO - TEST CASE 10 Retry 2 - Result - Failed
2025-04-16 15:01:25,843 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.18s
2025-04-16 15:01:25,843 - INFO - Failed after all retries for test case 10
2025-04-16 15:01:34,575 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:01:34,576 - INFO - TEST CASE 10 Retry 3
2025-04-16 15:01:34,576 - INFO - ---------------
2025-04-16 15:01:34,577 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
from uuid import UUID
from theory_evaluation import manage_user_performance

def test_manage_user_performance_update_performance(mocker):
    mock_db_session = mocker.patch('theory_evaluation.get_db', return_value=MagicMock())
    mock_performance = MagicMock()
    mock_db_session.return_value.__enter__.return_value.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = "test@example.com"
    question_id = UUID("12345678-1234-5678-1234-567812345678")
    llm_evaluation = "Evaluation"
    llm_score = 90
    user_grade = "Pass"

    result = manage_user_performance(
        mode=1,
        email=email,
        question_id=question_id,
        llm_evaluation=llm_evaluation,
        llm_score=llm_score,
        user_grade=user_grade,
        max_retries=3,
        retry_delay=2
    )

    assert result is True
    assert mock_performance.llm_evaluation == llm_evaluation
    assert mock_performance.llm_score == llm_score
    assert mock_performance.user_grade == user_grade
    assert mock_performance.llm_evaluation_status == 2

2025-04-16 15:01:34,578 - INFO - ---------------
2025-04-16 15:01:37,728 - INFO - TEST CASE 10 Retry 3 - Result - Failed
2025-04-16 15:01:37,728 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.33s
2025-04-16 15:01:37,728 - INFO - Failed after all retries for test case 10
2025-04-16 15:01:37,728 - INFO - 

2025-04-16 15:01:37,728 - INFO - TEST CASE 11 Retry 0
2025-04-16 15:01:37,728 - INFO - ---------------
2025-04-16 15:01:37,728 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_manage_user_performance_decrement_attempts(mock_db_session):
    mock_performance = MagicMock()
    mock_performance.user_attempts = 1
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

2025-04-16 15:01:37,729 - INFO - ---------------
2025-04-16 15:01:40,415 - INFO - TEST CASE 11 Retry 0 - Result - Failed
2025-04-16 15:01:40,415 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.59s
2025-04-16 15:01:45,282 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:01:45,282 - INFO - TEST CASE 11 Retry 1
2025-04-16 15:01:45,282 - INFO - ---------------
2025-04-16 15:01:45,283 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import MagicMock
from uuid import uuid4
from pydantic import EmailStr

from your_module import manage_user_performance

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_manage_user_performance_decrement_attempts(mock_db_session):
    mock_performance = MagicMock()
    mock_performance.user_attempts = 1
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = EmailStr("test@example.com")
    question_id = uuid4()

    result = manage_user_performance(
        mode=2,
        email=email,
        question_id=question_id,
        mock_db_session=mock_db_session
    )

    assert result is True
    mock_db_session.delete.assert_called_once_with(mock_performance)
    mock_db_session.commit.assert_called_once()

2025-04-16 15:01:45,283 - INFO - ---------------
2025-04-16 15:01:47,945 - INFO - TEST CASE 11 Retry 1 - Result - Failed
2025-04-16 15:01:47,946 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.22s
2025-04-16 15:01:47,946 - INFO - Failed after all retries for test case 11
2025-04-16 15:01:52,961 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:01:52,962 - INFO - TEST CASE 11 Retry 2
2025-04-16 15:01:52,963 - INFO - ---------------
2025-04-16 15:01:52,965 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import MagicMock
from uuid import uuid4
from pydantic import EmailStr

from your_module import manage_user_performance

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_manage_user_performance_decrement_attempts(mock_db_session):
    mock_performance = MagicMock()
    mock_performance.user_attempts = 1
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = EmailStr("test@example.com")
    question_id = uuid4()

    result = manage_user_performance(
        mode=2,
        email=email,
        question_id=question_id,
        mock_db_session=mock_db_session
    )

    assert result is True
    mock_db_session.delete.assert_called_once_with(mock_performance)
    mock_db_session.commit.assert_called_once()

2025-04-16 15:01:52,966 - INFO - ---------------
2025-04-16 15:01:56,084 - INFO - TEST CASE 11 Retry 2 - Result - Failed
2025-04-16 15:01:56,085 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.28s
2025-04-16 15:01:56,085 - INFO - Failed after all retries for test case 11
2025-04-16 15:01:59,104 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:01:59,105 - INFO - TEST CASE 11 Retry 3
2025-04-16 15:01:59,106 - INFO - ---------------
2025-04-16 15:01:59,106 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
import pytest
from unittest.mock import MagicMock
from uuid import uuid4
from pydantic import EmailStr

from your_module import manage_user_performance

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_manage_user_performance_decrement_attempts(mock_db_session):
    mock_performance = MagicMock()
    mock_performance.user_attempts = 1
    mock_db_session.query.return_value.filter.return_value.order_by.return_value.first.return_value = mock_performance

    email = EmailStr("test@example.com")
    question_id = uuid4()

    result = manage_user_performance(
        mode=2,
        email=email,
        question_id=question_id,
        mock_db_session=mock_db_session
    )

    assert result is True
    mock_db_session.delete.assert_called_once_with(mock_performance)
    mock_db_session.commit.assert_called_once()

2025-04-16 15:01:59,107 - INFO - ---------------
2025-04-16 15:02:01,401 - INFO - TEST CASE 11 Retry 3 - Result - Failed
2025-04-16 15:02:01,402 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.22s
2025-04-16 15:02:01,403 - INFO - Failed after all retries for test case 11
2025-04-16 15:02:01,404 - INFO - 

2025-04-16 15:02:01,404 - INFO - TEST CASE 12 Retry 0
2025-04-16 15:02:01,405 - INFO - ---------------
2025-04-16 15:02:01,405 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_delete_user_performance_exists(mock_db_session):
    mock_performance = [MagicMock(), MagicMock()]
    mock_db_session.query.return_value.filter.return_value.all.return_value = mock_performance

2025-04-16 15:02:01,406 - INFO - ---------------
2025-04-16 15:02:04,812 - INFO - TEST CASE 12 Retry 0 - Result - Failed
2025-04-16 15:02:04,812 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.58s
2025-04-16 15:02:09,042 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:02:09,044 - INFO - TEST CASE 12 Retry 1
2025-04-16 15:02:09,044 - INFO - ---------------
2025-04-16 15:02:09,048 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
from uuid import UUID
import pytest
from your_module import delete_user_performance

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_delete_user_performance_exists(mock_db_session):
    mock_performance = [MagicMock(), MagicMock()]
    mock_db_session.query.return_value.filter.return_value.all.return_value = mock_performance

    email = "test@example.com"
    question_id = UUID("12345678-1234-5678-1234-567812345678")

    with mock_db_session() as db:
        result = delete_user_performance(email, question_id)
        assert result is True
        assert db.delete.call_count == len(mock_performance)
        db.commit.assert_called_once()

2025-04-16 15:02:09,049 - INFO - ---------------
2025-04-16 15:02:13,204 - INFO - TEST CASE 12 Retry 1 - Result - Failed
2025-04-16 15:02:13,205 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.64s
2025-04-16 15:02:13,205 - INFO - Failed after all retries for test case 12
2025-04-16 15:02:16,012 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:02:16,013 - INFO - TEST CASE 12 Retry 2
2025-04-16 15:02:16,014 - INFO - ---------------
2025-04-16 15:02:16,015 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
from uuid import UUID
import pytest
from your_module import delete_user_performance

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_delete_user_performance_exists(mock_db_session):
    mock_performance = [MagicMock(), MagicMock()]
    mock_db_session.query.return_value.filter.return_value.all.return_value = mock_performance

    email = "test@example.com"
    question_id = UUID("12345678-1234-5678-1234-567812345678")

    with mock_db_session as db:
        result = delete_user_performance(email, question_id)
        assert result is True
        assert db.delete.call_count == len(mock_performance)
        db.commit.assert_called_once()

2025-04-16 15:02:16,015 - INFO - ---------------
2025-04-16 15:02:19,095 - INFO - TEST CASE 12 Retry 2 - Result - Failed
2025-04-16 15:02:19,095 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.31s
2025-04-16 15:02:19,096 - INFO - Failed after all retries for test case 12
2025-04-16 15:02:22,065 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:02:22,066 - INFO - TEST CASE 12 Retry 3
2025-04-16 15:02:22,067 - INFO - ---------------
2025-04-16 15:02:22,067 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest.mock import MagicMock
from uuid import UUID
import pytest
from your_module import delete_user_performance

@pytest.fixture
def mock_db_session():
    return MagicMock()

def test_delete_user_performance_exists(mock_db_session):
    mock_performance = [MagicMock(), MagicMock()]
    mock_db_session.query.return_value.filter.return_value.all.return_value = mock_performance

    email = "test@example.com"
    question_id = UUID("12345678-1234-5678-1234-567812345678")

    result = delete_user_performance(email, question_id)
    assert result is True
    assert mock_db_session.delete.call_count == len(mock_performance)
    mock_db_session.commit.assert_called_once()

2025-04-16 15:02:22,067 - INFO - ---------------
2025-04-16 15:02:24,831 - INFO - TEST CASE 12 Retry 3 - Result - Failed
2025-04-16 15:02:24,832 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.35s
2025-04-16 15:02:24,833 - INFO - Failed after all retries for test case 12
2025-04-16 15:02:24,833 - INFO - 

2025-04-16 15:02:24,834 - INFO - TEST CASE 13 Retry 0
2025-04-16 15:02:24,835 - INFO - ---------------
2025-04-16 15:02:24,835 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

def test_delete_user_performance_not_exists(mock_db_session):
    mock_db_session.query.return_value.filter.return_value.all.return_value = []

2025-04-16 15:02:24,836 - INFO - ---------------
2025-04-16 15:02:28,161 - INFO - TEST CASE 13 Retry 0 - Result - Failed
2025-04-16 15:02:28,163 - INFO - Test Error 1 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.57s
2025-04-16 15:02:36,378 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:02:36,379 - INFO - TEST CASE 13 Retry 1
2025-04-16 15:02:36,380 - INFO - ---------------
2025-04-16 15:02:36,381 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest import mock
from uuid import UUID
from your_module import delete_user_performance  # Replace with the actual import path

def test_delete_user_performance_not_exists():
    mock_db_session = mock.Mock()
    mock_db_session.query.return_value.filter.return_value.all.return_value = []

    with mock.patch('your_module.get_db', return_value=mock_db_session):
        result = delete_user_performance(email="test@example.com", question_id=UUID("00000000-0000-0000-0000-000000000000"))
        assert result is False

2025-04-16 15:02:36,382 - INFO - ---------------
2025-04-16 15:02:39,588 - INFO - TEST CASE 13 Retry 1 - Result - Failed
2025-04-16 15:02:39,589 - INFO - Test Error 2 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.63s
2025-04-16 15:02:39,590 - INFO - Failed after all retries for test case 13
2025-04-16 15:02:42,009 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:02:42,011 - INFO - TEST CASE 13 Retry 2
2025-04-16 15:02:42,012 - INFO - ---------------
2025-04-16 15:02:42,012 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest import mock
from uuid import UUID
from your_module import delete_user_performance  # Replace with the actual import path

def test_delete_user_performance_not_exists():
    mock_db_session = mock.Mock()
    mock_db_session.query.return_value.filter.return_value.all.return_value = []

    with mock.patch('your_module.get_db', return_value=mock_db_session):
        result = delete_user_performance(email="test@example.com", question_id=UUID("00000000-0000-0000-0000-000000000000"))
        assert result is False

2025-04-16 15:02:42,013 - INFO - ---------------
2025-04-16 15:02:45,152 - INFO - TEST CASE 13 Retry 2 - Result - Failed
2025-04-16 15:02:45,154 - INFO - Test Error 3 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.64s
2025-04-16 15:02:45,154 - INFO - Failed after all retries for test case 13
2025-04-16 15:02:48,260 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-16 15:02:48,263 - INFO - TEST CASE 13 Retry 3
2025-04-16 15:02:48,264 - INFO - ---------------
2025-04-16 15:02:48,265 - INFO - 
import os
import time
import pydantic
from uuid import UUID
from sqlalchemy import create_engine, and_, desc
from sqlalchemy.orm import sessionmaker, scoped_session
from sqlalchemy.exc import SQLAlchemyError, OperationalError
from contextlib import contextmanager
from theory_evaluation import models
from theory_evaluation.utils import delete_user_performance, get_db, get_marking_scheme, get_user_performance, init_db_session, manage_user_performance, validate_user
import pytest
@pytest.fixture
def mock_db_session():
    with patch('theory_evaluation.utils.get_db') as mock_get_db:
        mock_session = MagicMock()
        mock_get_db.return_value.__enter__.return_value = mock_session
        yield mock_session

# New Test Case
from unittest import mock
from uuid import UUID
from your_module import delete_user_performance  # Replace with the actual import path

def test_delete_user_performance_not_exists():
    mock_db_session = mock.Mock()
    mock_db_session.query.return_value.filter.return_value.all.return_value = []

    with mock.patch('your_module.get_db', return_value=mock_db_session):
        result = delete_user_performance(email="test@example.com", question_id=UUID("00000000-0000-0000-0000-000000000000"))
        assert result is False

2025-04-16 15:02:48,265 - INFO - ---------------
2025-04-16 15:02:52,130 - INFO - TEST CASE 13 Retry 3 - Result - Failed
2025-04-16 15:02:52,131 - INFO - Test Error 4 - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))

=================================== ERRORS ====================================
________________________ ERROR collecting temp/temp.py ________________________
ImportError while importing test module 'C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\importlib\__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
temp\temp.py:9: in <module>
    from theory_evaluation import models
theory_evaluation\__init__.py:4: in <module>
    from . import main
E   ImportError: cannot import name 'main' from partially initialized module 'theory_evaluation' (most likely due to a circular import) (C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\__init__.py)
============================== warnings summary ===============================
theory_evaluation\models.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\theory_evaluation\models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
1 warning, 1 error in 1.55s
2025-04-16 15:02:52,132 - INFO - Failed after all retries for test case 13
2025-04-16 15:02:52,132 - INFO - run_each_pytest_function_individually complete
2025-04-16 15:02:52,141 - INFO - End Processing file: theory_evaluation\utils.py

2025-04-16 15:02:52,142 - INFO - 
Start Processing file: theory_evaluation\__init__.py
2025-04-16 15:02:52,147 - INFO - Extraction of function and class start
2025-04-16 15:02:52,148 - INFO - extraction of function and class complete
2025-04-16 15:02:52,151 - WARNING - No public functions found in theory_evaluation\__init__.py. Skipping test generation.

