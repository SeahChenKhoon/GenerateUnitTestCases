2025-04-17 11:17:25,055 - INFO - Loading environment variables start
2025-04-17 11:17:25,058 - INFO - Loading environment variables completes
2025-04-17 11:17:25,058 - INFO - Initialising of LLM start
2025-04-17 11:17:25,384 - INFO - Initialising of LLM completes
2025-04-17 11:17:25,384 - INFO - Getting python file starts
2025-04-17 11:17:25,385 - INFO - Getting python file completes
2025-04-17 11:17:25,385 - INFO - 
Start Processing file: theory_evaluation\circle_utils.py
2025-04-17 11:17:25,385 - INFO - Extraction of function and class start
2025-04-17 11:17:25,385 - INFO - extraction of function and class complete
2025-04-17 11:17:25,385 - INFO - Generate Unit Test Case starts
2025-04-17 11:17:25,385 - INFO - Extract unique import start
2025-04-17 11:17:26,853 - INFO - Extract unique import complete
2025-04-17 11:17:26,854 - INFO - Update relative import start
2025-04-17 11:17:26,855 - INFO - Update relative import complete
2025-04-17 11:17:30,343 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 11:17:30,343 - INFO - Generate Unit Test Case complete
2025-04-17 11:17:30,349 - INFO - run_each_pytest_function_individually start
2025-04-17 11:17:34,571 - INFO - Number of test case to process - 6
2025-04-17 11:17:34,571 - INFO - 
TEST CASE 1 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

---------------
2025-04-17 11:17:35,392 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 11:17:35,393 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

2025-04-17 11:17:36,614 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area
import pytest

def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)
2025-04-17 11:17:37,273 - INFO - Test Case 1 processed successfully
2025-04-17 11:17:37,273 - INFO - 
TEST CASE 2 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

---------------
2025-04-17 11:17:37,800 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 11:17:37,800 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

2025-04-17 11:17:39,465 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)
2025-04-17 11:17:40,187 - INFO - Test Case 2 processed successfully
2025-04-17 11:17:40,187 - INFO - 
TEST CASE 3 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

---------------
2025-04-17 11:17:40,795 - INFO - TEST CASE 3 Retry 0 - Result - Passed
2025-04-17 11:17:40,795 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

2025-04-17 11:17:42,349 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)
2025-04-17 11:17:43,078 - INFO - Test Case 3 processed successfully
2025-04-17 11:17:43,078 - INFO - 
TEST CASE 4 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

---------------
2025-04-17 11:17:43,633 - INFO - TEST CASE 4 Retry 0 - Result - Passed
2025-04-17 11:17:43,633 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

2025-04-17 11:17:46,421 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)
2025-04-17 11:17:47,102 - INFO - Test Case 4 processed successfully
2025-04-17 11:17:47,102 - INFO - 
TEST CASE 5 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_zero_radius():
    radius = 0
    expected_circumference = 0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

---------------
2025-04-17 11:17:47,677 - INFO - TEST CASE 5 Retry 0 - Result - Passed
2025-04-17 11:17:47,677 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0
    expected_circumference = 0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

2025-04-17 11:17:50,174 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0
    expected_circumference = 0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)
2025-04-17 11:17:50,882 - INFO - Test Case 5 processed successfully
2025-04-17 11:17:50,882 - INFO - 
TEST CASE 6 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(-1)

---------------
2025-04-17 11:17:51,437 - INFO - TEST CASE 6 Retry 0 - Result - Passed
2025-04-17 11:17:51,437 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0
    expected_circumference = 0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(-1)

2025-04-17 11:17:54,944 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0
    expected_area = 0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(-1)

def test_circle_circumference_positive_radius():
    radius = 5
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0
    expected_circumference = 0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_negative_radius():
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(-1)
2025-04-17 11:17:55,583 - INFO - Test Case 6 processed successfully
2025-04-17 11:17:55,583 - INFO - run_each_pytest_function_individually complete
2025-04-17 11:17:55,583 - INFO - Statistic theory_evaluation\circle_utils.py: 
Total test case - 6
Total test case passed - 6
Percentage Passed - 100.0%

2025-04-17 11:17:55,584 - INFO - End Processing file: theory_evaluation\circle_utils.py

2025-04-17 11:17:55,584 - INFO - 
Start Processing file: theory_evaluation\llm_utils.py
2025-04-17 11:17:55,584 - INFO - Extraction of function and class start
2025-04-17 11:17:55,584 - INFO - extraction of function and class complete
2025-04-17 11:17:55,584 - INFO - Generate Unit Test Case starts
2025-04-17 11:17:55,584 - INFO - Extract unique import start
2025-04-17 11:17:56,323 - INFO - Extract unique import complete
2025-04-17 11:17:56,324 - INFO - Update relative import start
2025-04-17 11:17:56,324 - INFO - Update relative import complete
2025-04-17 11:18:00,871 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 11:18:00,872 - INFO - Generate Unit Test Case complete
2025-04-17 11:18:00,875 - INFO - run_each_pytest_function_individually start
2025-04-17 11:18:05,833 - INFO - Number of test case to process - 4
2025-04-17 11:18:05,834 - INFO - 
TEST CASE 1 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."

---------------
2025-04-17 11:18:06,553 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 11:18:06,553 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."

2025-04-17 11:18:07,695 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."
2025-04-17 11:18:08,322 - INFO - Test Case 1 processed successfully
2025-04-17 11:18:08,322 - INFO - 
TEST CASE 2 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_prompt("non_existent_agent")
        assert result is None

---------------
2025-04-17 11:18:08,901 - INFO - TEST CASE 2 Retry 0 - Result - Failed
2025-04-17 11:18:08,902 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
____________________ test_initialise_prompt_no_config_path ____________________
temp\temp.py:10: in test_initialise_prompt_no_config_path
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt_no_config_path - NameError: name ...
1 failed in 0.08s
2025-04-17 11:18:09,997 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 11:18:09,998 - INFO - 
TEST CASE 2 Retry 1
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



from unittest.mock import patch

def test_initialise_prompt_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_prompt("non_existent_agent")
        assert result is None

---------------
2025-04-17 11:18:10,872 - INFO - TEST CASE 2 Retry 1 - Result - Passed
2025-04-17 11:18:10,872 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."

from unittest.mock import patch

def test_initialise_prompt_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_prompt("non_existent_agent")
        assert result is None

2025-04-17 11:18:12,888 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt
import pytest
from unittest.mock import patch


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."


def test_initialise_prompt_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_prompt("non_existent_agent")
        assert result is None
2025-04-17 11:18:13,733 - INFO - Test Case 2 processed successfully
2025-04-17 11:18:13,733 - INFO - 
TEST CASE 3 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "setting_key: setting_value"
    expected_settings = {'setting_key': 'setting_value'}

---------------
2025-04-17 11:18:14,390 - INFO - TEST CASE 3 Retry 0 - Result - Passed
2025-04-17 11:18:14,390 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."

from unittest.mock import patch

def test_initialise_prompt_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_prompt("non_existent_agent")
        assert result is None

def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "setting_key: setting_value"
    expected_settings = {'setting_key': 'setting_value'}

2025-04-17 11:18:17,222 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
from unittest.mock import patch


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."


def test_initialise_prompt_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_prompt("non_existent_agent")
        assert result is None


def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "setting_key: setting_value"
    expected_settings = {'setting_key': 'setting_value'}
2025-04-17 11:18:17,858 - INFO - Test Case 3 processed successfully
2025-04-17 11:18:17,858 - INFO - 
TEST CASE 4 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_settings_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_settings("non_existent_agent")
        assert result is None

---------------
2025-04-17 11:18:18,466 - INFO - TEST CASE 4 Retry 0 - Result - Failed
2025-04-17 11:18:18,466 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
___________________ test_initialise_settings_no_config_path ___________________
temp\temp.py:10: in test_initialise_settings_no_config_path
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_settings_no_config_path - NameError: nam...
1 failed in 0.08s
2025-04-17 11:18:19,637 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 11:18:19,637 - INFO - 
TEST CASE 4 Retry 1
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



from unittest.mock import patch

def test_initialise_settings_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_settings("non_existent_agent")
        assert result is None

---------------
2025-04-17 11:18:20,360 - INFO - TEST CASE 4 Retry 1 - Result - Passed
2025-04-17 11:18:20,360 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."

from unittest.mock import patch

def test_initialise_prompt_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_prompt("non_existent_agent")
        assert result is None

def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "setting_key: setting_value"
    expected_settings = {'setting_key': 'setting_value'}

from unittest.mock import patch

def test_initialise_settings_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_settings("non_existent_agent")
        assert result is None

2025-04-17 11:18:24,204 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest
from unittest.mock import patch


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "key: value"
    prompt_txt = "This is a {$key} test."
    expected_prompt = "This is a value test."


def test_initialise_prompt_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_prompt("non_existent_agent")
        assert result is None


def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "setting_key: setting_value"
    expected_settings = {'setting_key': 'setting_value'}


def test_initialise_settings_no_config_path():
    with patch("theory_evaluation.llm_utils.open", side_effect=FileNotFoundError):
        result = initialise_settings("non_existent_agent")
        assert result is None
2025-04-17 11:18:24,938 - INFO - Test Case 4 processed successfully
2025-04-17 11:18:24,938 - INFO - run_each_pytest_function_individually complete
2025-04-17 11:18:24,938 - INFO - Statistic theory_evaluation\llm_utils.py: 
Total test case - 4
Total test case passed - 4
Percentage Passed - 100.0%

2025-04-17 11:18:24,939 - INFO - End Processing file: theory_evaluation\llm_utils.py

