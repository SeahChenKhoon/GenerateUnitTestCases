2025-04-17 14:09:16,594 - INFO - Loading environment variables start
2025-04-17 14:09:16,603 - INFO - Loading environment variables completes
2025-04-17 14:09:16,604 - INFO - Initialising of LLM start
2025-04-17 14:09:17,089 - INFO - Initialising of LLM completes
2025-04-17 14:09:17,089 - INFO - Getting python file starts
2025-04-17 14:09:17,090 - INFO - Getting python file completes
2025-04-17 14:09:17,090 - INFO - 
Start Processing file: theory_evaluation\circle_utils.py
2025-04-17 14:09:17,090 - INFO - Extraction of function and class start
2025-04-17 14:09:17,091 - INFO - extraction of function and class complete
2025-04-17 14:09:17,091 - INFO - Generate Unit Test Case starts
2025-04-17 14:09:17,091 - INFO - Extract unique import start
2025-04-17 14:09:19,007 - INFO - Extract unique import complete
2025-04-17 14:09:19,008 - INFO - Update relative import start
2025-04-17 14:09:19,010 - INFO - Update relative import complete
2025-04-17 14:09:23,746 - INFO - Generate Unit Test Case complete
2025-04-17 14:09:23,751 - INFO - run_each_pytest_function_individually start
2025-04-17 14:09:29,790 - INFO - Number of test case to process - 6
2025-04-17 14:09:29,790 - INFO - 
TEST CASE 1 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_area = math.pi * radius ** 2

---------------
2025-04-17 14:09:30,957 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 14:09:30,958 - INFO - 
TEST CASE 2 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

---------------
2025-04-17 14:09:31,930 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 14:09:31,931 - INFO - 
TEST CASE 3 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_area = 0.0

---------------
2025-04-17 14:09:33,159 - INFO - TEST CASE 3 Retry 0 - Result - Passed
2025-04-17 14:09:33,159 - INFO - 
TEST CASE 4 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_circumference = 2 * math.pi * radius

---------------
2025-04-17 14:09:34,065 - INFO - TEST CASE 4 Retry 0 - Result - Passed
2025-04-17 14:09:34,065 - INFO - 
TEST CASE 5 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

---------------
2025-04-17 14:09:35,031 - INFO - TEST CASE 5 Retry 0 - Result - Passed
2025-04-17 14:09:35,031 - INFO - 
TEST CASE 6 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_circumference = 0.0

---------------
2025-04-17 14:09:36,287 - INFO - TEST CASE 6 Retry 0 - Result - Passed
2025-04-17 14:09:36,288 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_area = math.pi * radius ** 2

def test_circle_area_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

def test_circle_area_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_area = 0.0

def test_circle_circumference_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_circumference = 2 * math.pi * radius

def test_circle_circumference_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

def test_circle_circumference_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_circumference = 0.0

2025-04-17 14:09:39,885 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest

def test_circle_area_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_area = math.pi * radius ** 2

def test_circle_area_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

def test_circle_area_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_area = 0.0

def test_circle_circumference_returns_correct_value_for_positive_radius():
    # Arrange
    radius = 3.0
    expected_circumference = 2 * math.pi * radius

def test_circle_circumference_raises_value_error_for_negative_radius():
    # Arrange
    radius = -1.0

def test_circle_circumference_returns_zero_for_zero_radius():
    # Arrange
    radius = 0.0
    expected_circumference = 0.0
2025-04-17 14:09:41,461 - INFO - Improvement of test cases processed successfully
2025-04-17 14:09:41,462 - INFO - run_each_pytest_function_individually complete
2025-04-17 14:09:41,462 - INFO - End Processing file: theory_evaluation\circle_utils.py

2025-04-17 14:09:41,462 - INFO - 
Start Processing file: theory_evaluation\llm_utils.py
2025-04-17 14:09:41,462 - INFO - Extraction of function and class start
2025-04-17 14:09:41,462 - INFO - extraction of function and class complete
2025-04-17 14:09:41,462 - INFO - Generate Unit Test Case starts
2025-04-17 14:09:41,462 - INFO - Extract unique import start
2025-04-17 14:09:42,041 - INFO - Extract unique import complete
2025-04-17 14:09:42,041 - INFO - Update relative import start
2025-04-17 14:09:42,042 - INFO - Update relative import complete
2025-04-17 14:09:49,411 - INFO - Generate Unit Test Case complete
2025-04-17 14:09:49,416 - INFO - run_each_pytest_function_individually start
2025-04-17 14:10:03,985 - INFO - Number of test case to process - 5
2025-04-17 14:10:03,985 - INFO - 
TEST CASE 1 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_returns_correct_structure():
    agent = "test_agent"
    mock_config = {'name': 'Test Agent', 'version': '1.0'}
    mock_prompt = "Hello, {$name}. Version: {$version}."

---------------
2025-04-17 14:10:05,495 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 14:10:05,496 - INFO - 
TEST CASE 2 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_handles_missing_placeholder():
    agent = "test_agent"
    mock_config = {'name': 'Test Agent'}
    mock_prompt = "Hello, {$name}. Version: {$version}."

---------------
2025-04-17 14:10:06,610 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 14:10:06,610 - INFO - 
TEST CASE 3 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_raises_exception_for_missing_file():
    agent = "test_agent"
    with patch("builtins.open", side_effect=FileNotFoundError):
        with pytest.raises(FileNotFoundError):
            initialise_prompt(agent)

---------------
2025-04-17 14:10:07,794 - INFO - TEST CASE 3 Retry 0 - Result - Failed
2025-04-17 14:10:07,794 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
__________ test_initialise_prompt_raises_exception_for_missing_file ___________
temp\temp.py:11: in test_initialise_prompt_raises_exception_for_missing_file
    with patch("builtins.open", side_effect=FileNotFoundError):
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt_raises_exception_for_missing_file
1 failed in 0.14s
2025-04-17 14:10:09,075 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 14:10:09,075 - INFO - 
TEST CASE 3 Retry 1
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



import pytest
from unittest.mock import patch

def test_initialise_prompt_raises_exception_for_missing_file():
    agent = "test_agent"
    with patch("builtins.open", side_effect=FileNotFoundError):
        with pytest.raises(FileNotFoundError):
            initialise_prompt(agent)

---------------
2025-04-17 14:10:10,468 - INFO - TEST CASE 3 Retry 1 - Result - Failed
2025-04-17 14:10:10,468 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
__________ test_initialise_prompt_raises_exception_for_missing_file ___________
temp\temp.py:15: in test_initialise_prompt_raises_exception_for_missing_file
    with pytest.raises(FileNotFoundError):
E   Failed: DID NOT RAISE <class 'FileNotFoundError'>
---------------------------- Captured stdout call -----------------------------
: No configuration path to the prompt given.
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt_raises_exception_for_missing_file
1 failed in 0.24s
2025-04-17 14:10:11,835 - INFO - 
TEST CASE 3 Retry 2
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



import pytest
from unittest.mock import patch

def test_initialise_prompt_raises_exception_for_missing_file():
    agent = "test_agent"
    with patch("builtins.open", side_effect=FileNotFoundError):
        with pytest.raises(FileNotFoundError):
            result = initialise_prompt(agent)
            assert result is None  # Ensure that the function returns None when an exception is raised

---------------
2025-04-17 14:10:13,388 - INFO - TEST CASE 3 Retry 2 - Result - Failed
2025-04-17 14:10:13,389 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
__________ test_initialise_prompt_raises_exception_for_missing_file ___________
temp\temp.py:15: in test_initialise_prompt_raises_exception_for_missing_file
    with pytest.raises(FileNotFoundError):
E   Failed: DID NOT RAISE <class 'FileNotFoundError'>
---------------------------- Captured stdout call -----------------------------
: No configuration path to the prompt given.
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_prompt_raises_exception_for_missing_file
1 failed in 0.29s
2025-04-17 14:10:14,703 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 14:10:14,704 - INFO - Failed after all retries for test case 3
2025-04-17 14:10:14,704 - INFO - 
TEST CASE 4 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_settings_returns_correct_values():
    agent = "test_agent"
    mock_settings = {'setting1': 'value1', 'setting2': 'value2'}

---------------
2025-04-17 14:10:16,269 - INFO - TEST CASE 4 Retry 0 - Result - Passed
2025-04-17 14:10:16,270 - INFO - 
TEST CASE 5 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_settings_raises_exception_for_missing_file():
    agent = "test_agent"
    with patch("builtins.open", side_effect=FileNotFoundError):
        with pytest.raises(FileNotFoundError):
            initialise_settings(agent)

---------------
2025-04-17 14:10:17,592 - INFO - TEST CASE 5 Retry 0 - Result - Failed
2025-04-17 14:10:17,592 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
_________ test_initialise_settings_raises_exception_for_missing_file __________
temp\temp.py:11: in test_initialise_settings_raises_exception_for_missing_file
    with patch("builtins.open", side_effect=FileNotFoundError):
E   NameError: name 'patch' is not defined
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_settings_raises_exception_for_missing_file
1 failed in 0.29s
2025-04-17 14:10:18,786 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 14:10:18,787 - INFO - 
TEST CASE 5 Retry 1
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



import pytest
from unittest.mock import patch

def test_initialise_settings_raises_exception_for_missing_file():
    agent = "test_agent"
    with patch("builtins.open", side_effect=FileNotFoundError):
        with pytest.raises(FileNotFoundError):
            initialise_settings(agent)

---------------
2025-04-17 14:10:20,325 - INFO - TEST CASE 5 Retry 1 - Result - Failed
2025-04-17 14:10:20,325 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
_________ test_initialise_settings_raises_exception_for_missing_file __________
temp\temp.py:15: in test_initialise_settings_raises_exception_for_missing_file
    with pytest.raises(FileNotFoundError):
E   Failed: DID NOT RAISE <class 'FileNotFoundError'>
---------------------------- Captured stdout call -----------------------------
: No configuration path to the llm settings given.
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_settings_raises_exception_for_missing_file
1 failed in 0.31s
2025-04-17 14:10:21,400 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 14:10:21,401 - INFO - 
TEST CASE 5 Retry 2
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



import pytest
from unittest.mock import patch

def test_initialise_settings_raises_exception_for_missing_file():
    agent = "test_agent"
    with patch("builtins.open", side_effect=FileNotFoundError):
        with pytest.raises(FileNotFoundError):
            initialise_settings(agent)

---------------
2025-04-17 14:10:23,217 - INFO - TEST CASE 5 Retry 2 - Result - Failed
2025-04-17 14:10:23,217 - INFO - Test Error - c:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\.venv\Lib\site-packages\pytest_asyncio\plugin.py:217: PytestDeprecationWarning: The configuration option "asyncio_default_fixture_loop_scope" is unset.
The event loop scope for asynchronous fixtures will default to the fixture caching scope. Future versions of pytest-asyncio will default the loop scope for asynchronous fixtures to function scope. Set the default fixture loop scope explicitly in order to avoid unexpected behavior in the future. Valid fixture loop scopes are: "function", "class", "module", "package", "session"

  warnings.warn(PytestDeprecationWarning(_DEFAULT_FIXTURE_LOOP_SCOPE_UNSET))
F                                                                        [100%]
================================== FAILURES ===================================
_________ test_initialise_settings_raises_exception_for_missing_file __________
temp\temp.py:15: in test_initialise_settings_raises_exception_for_missing_file
    with pytest.raises(FileNotFoundError):
E   Failed: DID NOT RAISE <class 'FileNotFoundError'>
---------------------------- Captured stdout call -----------------------------
: No configuration path to the llm settings given.
=========================== short test summary info ===========================
FAILED temp/temp.py::test_initialise_settings_raises_exception_for_missing_file
1 failed in 0.22s
2025-04-17 14:10:24,433 - INFO - Failed after all retries for test case 5
2025-04-17 14:10:24,434 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_returns_correct_structure():
    agent = "test_agent"
    mock_config = {'name': 'Test Agent', 'version': '1.0'}
    mock_prompt = "Hello, {$name}. Version: {$version}."

def test_initialise_prompt_handles_missing_placeholder():
    agent = "test_agent"
    mock_config = {'name': 'Test Agent'}
    mock_prompt = "Hello, {$name}. Version: {$version}."

def test_initialise_settings_returns_correct_values():
    agent = "test_agent"
    mock_settings = {'setting1': 'value1', 'setting2': 'value2'}

2025-04-17 14:10:26,767 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_returns_correct_structure():
    agent = "test_agent"
    mock_config = {'name': 'Test Agent', 'version': '1.0'}
    mock_prompt = "Hello, {$name}. Version: {$version}."

def test_initialise_prompt_handles_missing_placeholder():
    agent = "test_agent"
    mock_config = {'name': 'Test Agent'}
    mock_prompt = "Hello, {$name}. Version: {$version}."

def test_initialise_settings_returns_correct_values():
    agent = "test_agent"
    mock_settings = {'setting1': 'value1', 'setting2': 'value2'}
2025-04-17 14:10:28,414 - INFO - Improvement of test cases processed successfully
2025-04-17 14:10:28,414 - INFO - run_each_pytest_function_individually complete
2025-04-17 14:10:28,414 - ERROR - Failed processing theory_evaluation\llm_utils.py: 'str' object has no attribute 'relative_to'
2025-04-17 14:10:28,414 - INFO - End Processing file: theory_evaluation\llm_utils.py

2025-04-17 14:10:28,417 - INFO - 
+----+-----------------------------------+---------------------------+--------------------+-------------------------+
|    | filename                          |   total_test_cases_passed |   total_test_cases |   percentage_passed (%) |
+====+===================================+===========================+====================+=========================+
|  1 | theory_evaluation\circle_utils.py |                         6 |                  6 |                     100 |
+----+-----------------------------------+---------------------------+--------------------+-------------------------+
|  2 | theory_evaluation\llm_utils.py    |                         3 |                  5 |                      60 |
+----+-----------------------------------+---------------------------+--------------------+-------------------------+
