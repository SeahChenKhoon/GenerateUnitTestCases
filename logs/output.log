2025-04-15 14:58:07,264 - INFO - Loading environment variables...
2025-04-15 14:58:07,568 - INFO - Start Processing file: theory_evaluation\llm_handler.py
2025-04-15 14:58:20,686 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-15 14:58:32,828 - INFO - 

2025-04-15 14:58:32,829 - INFO - TEST CASE 1 Retry 0
2025-04-15 14:58:32,829 - INFO - ---------------
2025-04-15 14:58:32,829 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
@pytest.fixture
def mock_openai_client():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        yield mock_azure, mock_openai

@pytest.mark.asyncio
async def test_openai_llm_initialization(mock_openai_client):
    mock_azure, mock_openai = mock_openai_client
    os.environ['AZURE_OPENAI_ENDPOINT_SWEDEN'] = 'test_endpoint'
    os.environ['AZURE_OPENAI_API_KEY_SWEDEN'] = 'test_key'
    os.environ['AZURE_OPENAI_API_VERSION'] = 'test_version'
    os.environ['AZURE_OPENAI_DEPLOYMENT_NAME'] = 'test_deployment'
    os.environ['OPENAI_API_KEY'] = 'test_openai_key'
    os.environ['OPENAI_DEPLOYMENT_NAME'] = 'test_openai_deployment'

2025-04-15 14:58:32,832 - INFO - ---------------
2025-04-15 14:58:36,336 - INFO - Test Result 1- False
2025-04-15 14:58:36,336 - INFO - Test Error 1 - E                                                                        [100%]
=================================== ERRORS ====================================
______________ ERROR at setup of test_openai_llm_initialization _______________
temp\temp.py:10: in mock_openai_client
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
E   NameError: name 'patch' is not defined
============================== warnings summary ===============================
temp\temp.py:14
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py::test_openai_llm_initialization - NameError: name 'patch' ...
1 warning, 1 error in 2.12s
2025-04-15 14:58:39,163 - INFO - TEST CASE 1 Retry 1
2025-04-15 14:58:39,163 - INFO - ---------------
2025-04-15 14:58:39,164 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
@pytest.fixture
def mock_openai_client():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        yield mock_azure, mock_openai
import os
from unittest.mock import patch
import pytest

@pytest.mark.asyncio
async def test_openai_llm_initialization(mock_openai_client):
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        mock_azure, mock_openai = mock_openai_client
        os.environ['AZURE_OPENAI_ENDPOINT_SWEDEN'] = 'test_endpoint'
        os.environ['AZURE_OPENAI_API_KEY_SWEDEN'] = 'test_key'
        os.environ['AZURE_OPENAI_API_VERSION'] = 'test_version'
        os.environ['AZURE_OPENAI_DEPLOYMENT_NAME'] = 'test_deployment'
        os.environ['OPENAI_API_KEY'] = 'test_openai_key'
        os.environ['OPENAI_DEPLOYMENT_NAME'] = 'test_openai_deployment'

2025-04-15 14:58:39,164 - INFO - ---------------
2025-04-15 14:58:41,709 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-15 14:58:41,710 - INFO - New import Statements 2- import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
from unittest.mock import patch
2025-04-15 14:58:41,710 - INFO - Test Result 2- True
2025-04-15 14:58:41,710 - INFO - Test Error 2 - 
s                                                                        [100%]
============================== warnings summary ===============================
temp\temp.py:17
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py:17: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

temp/temp.py::test_openai_llm_initialization
  C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\site-packages\_pytest\python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
1 skipped, 2 warnings in 1.00s
2025-04-15 14:58:41,711 - INFO - 

2025-04-15 14:58:41,711 - INFO - TEST CASE 2 Retry 0
2025-04-15 14:58:41,711 - INFO - ---------------
2025-04-15 14:58:41,711 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
@pytest.fixture
def mock_openai_client():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        yield mock_azure, mock_openai

@pytest.mark.asyncio
async def test_openai_json_completion(mock_openai_client):
    _, mock_openai = mock_openai_client
    mock_response = AsyncMock()
    mock_response.choices[0].message.content = json.dumps({"answer": "42", "explanation": "It's the answer."})
    mock_openai.return_value.chat.completions.create.return_value = mock_response

2025-04-15 14:58:41,711 - INFO - ---------------
2025-04-15 14:58:43,767 - INFO - Test Result 1- False
2025-04-15 14:58:43,768 - INFO - Test Error 1 - E                                                                        [100%]
=================================== ERRORS ====================================
________________ ERROR at setup of test_openai_json_completion ________________
temp\temp.py:10: in mock_openai_client
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
E   NameError: name 'patch' is not defined
============================== warnings summary ===============================
temp\temp.py:14
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR temp/temp.py::test_openai_json_completion - NameError: name 'patch' is ...
1 warning, 1 error in 1.07s
2025-04-15 14:58:45,657 - INFO - TEST CASE 2 Retry 1
2025-04-15 14:58:45,658 - INFO - ---------------
2025-04-15 14:58:45,658 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
@pytest.fixture
def mock_openai_client():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        yield mock_azure, mock_openai
import pytest
from unittest.mock import patch, AsyncMock

@pytest.mark.asyncio
async def test_openai_json_completion(mock_openai_client):
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure:
        _, mock_openai = mock_openai_client
        mock_response = AsyncMock()
        mock_response.choices[0].message.content = json.dumps({"answer": "42", "explanation": "It's the answer."})
        mock_openai.return_value.chat.completions.create.return_value = mock_response

2025-04-15 14:58:45,658 - INFO - ---------------
2025-04-15 14:58:48,425 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-15 14:58:48,426 - INFO - New import Statements 2- import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
from unittest.mock import patch
from unittest.mock import AsyncMock
2025-04-15 14:58:48,426 - INFO - Test Result 2- True
2025-04-15 14:58:48,426 - INFO - Test Error 2 - 
s                                                                        [100%]
============================== warnings summary ===============================
temp\temp.py:16
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py:16: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

temp/temp.py::test_openai_json_completion
  C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\site-packages\_pytest\python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
1 skipped, 2 warnings in 1.34s
2025-04-15 14:58:48,426 - INFO - 

2025-04-15 14:58:48,427 - INFO - TEST CASE 3 Retry 0
2025-04-15 14:58:48,427 - INFO - ---------------
2025-04-15 14:58:48,427 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
from unittest.mock import patch
@pytest.fixture
def mock_openai_client():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        yield mock_azure, mock_openai

@pytest.mark.asyncio
async def test_openai_streaming(mock_openai_client):
    _, mock_openai = mock_openai_client
    mock_chunk = AsyncMock()
    mock_chunk.choices[0].delta.content = "streamed content"
    mock_openai.return_value.chat.completions.create.return_value = [mock_chunk]

2025-04-15 14:58:48,427 - INFO - ---------------
2025-04-15 14:58:51,367 - INFO - Test Result 1- True
2025-04-15 14:58:51,367 - INFO - Test Error 1 - s                                                                        [100%]
============================== warnings summary ===============================
temp\temp.py:15
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

temp/temp.py::test_openai_streaming
  C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\site-packages\_pytest\python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
1 skipped, 2 warnings in 1.58s
2025-04-15 14:58:51,367 - INFO - 

2025-04-15 14:58:51,367 - INFO - TEST CASE 4 Retry 0
2025-04-15 14:58:51,367 - INFO - ---------------
2025-04-15 14:58:51,367 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
from unittest.mock import patch
@pytest.fixture
def mock_openai_client():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        yield mock_azure, mock_openai

@pytest.mark.asyncio
async def test_openai_chat_completion(mock_openai_client):
    _, mock_openai = mock_openai_client
    mock_response = AsyncMock()
    mock_response.choices[0].message.content = "chat content"
    mock_openai.return_value.chat.completions.create.return_value = mock_response

2025-04-15 14:58:51,367 - INFO - ---------------
2025-04-15 14:58:53,636 - INFO - Test Result 1- True
2025-04-15 14:58:53,636 - INFO - Test Error 1 - s                                                                        [100%]
============================== warnings summary ===============================
temp\temp.py:15
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

temp/temp.py::test_openai_chat_completion
  C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\site-packages\_pytest\python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
1 skipped, 2 warnings in 1.50s
2025-04-15 14:58:53,636 - INFO - 

2025-04-15 14:58:53,636 - INFO - TEST CASE 5 Retry 0
2025-04-15 14:58:53,636 - INFO - ---------------
2025-04-15 14:58:53,636 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
from unittest.mock import patch
@pytest.fixture
def mock_openai_client():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        yield mock_azure, mock_openai

@pytest.mark.asyncio
async def test_execute_text_generation(mock_openai_client):
    _, mock_openai = mock_openai_client
    mock_response = AsyncMock()
    mock_response.choices[0].message.content = "generated text"
    mock_openai.return_value.chat.completions.create.return_value = mock_response

2025-04-15 14:58:53,636 - INFO - ---------------
2025-04-15 14:58:55,860 - INFO - Test Result 1- True
2025-04-15 14:58:55,860 - INFO - Test Error 1 - s                                                                        [100%]
============================== warnings summary ===============================
temp\temp.py:15
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

temp/temp.py::test_execute_text_generation
  C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\site-packages\_pytest\python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
1 skipped, 2 warnings in 1.28s
2025-04-15 14:58:55,860 - INFO - 

2025-04-15 14:58:55,860 - INFO - TEST CASE 6 Retry 0
2025-04-15 14:58:55,860 - INFO - ---------------
2025-04-15 14:58:55,860 - INFO - 
import asyncio
import json
import os

from openai import AzureOpenAI, OpenAI

import pytest
from unittest.mock import patch
@pytest.fixture
def mock_openai_client():
    with patch('theory_evaluation.llm_handler.AzureOpenAI') as mock_azure, \
         patch('theory_evaluation.llm_handler.OpenAI') as mock_openai:
        yield mock_azure, mock_openai

@pytest.mark.asyncio
async def test_execute_vision(mock_openai_client):
    _, mock_openai = mock_openai_client
    mock_response = AsyncMock()
    mock_response.choices[0].message.content = "vision response"
    mock_openai.return_value.chat.completions.create.return_value = mock_response

2025-04-15 14:58:55,860 - INFO - ---------------
2025-04-15 14:58:58,386 - INFO - Test Result 1- True
2025-04-15 14:58:58,386 - INFO - Test Error 1 - s                                                                        [100%]
============================== warnings summary ===============================
temp\temp.py:15
  C:\ChenKhoon\JupyterNotebook\GenerateUnitTestCases\temp\temp.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.asyncio - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.asyncio

temp/temp.py::test_execute_vision
  C:\Users\User\AppData\Local\Programs\Python\Python313\Lib\site-packages\_pytest\python.py:148: PytestUnhandledCoroutineWarning: async def functions are not natively supported and have been skipped.
  You need to install a suitable plugin for your async framework, for example:
    - anyio
    - pytest-asyncio
    - pytest-tornasync
    - pytest-trio
    - pytest-twisted
    warnings.warn(PytestUnhandledCoroutineWarning(msg.format(nodeid)))

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
1 skipped, 2 warnings in 1.74s
2025-04-15 14:58:58,387 - INFO - End Processing file: theory_evaluation\llm_handler.py

2025-04-15 14:58:58,387 - INFO - Start Processing file: theory_evaluation\llm_utils.py
2025-04-15 14:59:07,363 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-15 14:59:16,408 - INFO - End Processing file: theory_evaluation\llm_utils.py

2025-04-15 14:59:16,409 - INFO - Start Processing file: theory_evaluation\__init__.py
2025-04-15 14:59:16,409 - WARNING - No public functions found in theory_evaluation\__init__.py. Skipping test generation.

