2025-04-17 11:13:11,837 - INFO - Loading environment variables start
2025-04-17 11:13:11,842 - INFO - Loading environment variables completes
2025-04-17 11:13:11,842 - INFO - Initialising of LLM start
2025-04-17 11:13:12,214 - INFO - Initialising of LLM completes
2025-04-17 11:13:12,214 - INFO - Getting python file starts
2025-04-17 11:13:12,215 - INFO - Getting python file completes
2025-04-17 11:13:12,215 - INFO - 
Start Processing file: theory_evaluation\circle_utils.py
2025-04-17 11:13:12,215 - INFO - Extraction of function and class start
2025-04-17 11:13:12,216 - INFO - extraction of function and class complete
2025-04-17 11:13:12,216 - INFO - Generate Unit Test Case starts
2025-04-17 11:13:12,216 - INFO - Extract unique import start
2025-04-17 11:13:13,827 - INFO - Extract unique import complete
2025-04-17 11:13:13,828 - INFO - Update relative import start
2025-04-17 11:13:13,830 - INFO - Update relative import complete
2025-04-17 11:13:16,805 - INFO - Generate Unit Test Case complete
2025-04-17 11:13:16,810 - INFO - run_each_pytest_function_individually start
2025-04-17 11:13:20,716 - INFO - Number of test case to process - 6
2025-04-17 11:13:20,716 - INFO - 
TEST CASE 1 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

---------------
2025-04-17 11:13:21,456 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 11:13:21,456 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

2025-04-17 11:13:22,559 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)
2025-04-17 11:13:23,310 - INFO - Test Case 1 processed successfully
2025-04-17 11:13:23,310 - INFO - 
TEST CASE 2 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

---------------
2025-04-17 11:13:23,927 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 11:13:23,927 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

2025-04-17 11:13:25,653 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)
2025-04-17 11:13:26,304 - INFO - Test Case 2 processed successfully
2025-04-17 11:13:26,304 - INFO - 
TEST CASE 3 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)

---------------
2025-04-17 11:13:26,948 - INFO - TEST CASE 3 Retry 0 - Result - Passed
2025-04-17 11:13:26,948 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)

2025-04-17 11:13:28,817 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest

def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)
2025-04-17 11:13:29,435 - INFO - Test Case 3 processed successfully
2025-04-17 11:13:29,435 - INFO - 
TEST CASE 4 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_positive_radius():
    radius = 5.0
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

---------------
2025-04-17 11:13:30,065 - INFO - TEST CASE 4 Retry 0 - Result - Passed
2025-04-17 11:13:30,065 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)

def test_circle_circumference_positive_radius():
    radius = 5.0
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

2025-04-17 11:13:32,864 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)

def test_circle_circumference_positive_radius():
    radius = 5.0
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)
2025-04-17 11:13:33,614 - INFO - Test Case 4 processed successfully
2025-04-17 11:13:33,614 - INFO - 
TEST CASE 5 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_zero_radius():
    radius = 0.0
    expected_circumference = 0.0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

---------------
2025-04-17 11:13:34,224 - INFO - TEST CASE 5 Retry 0 - Result - Passed
2025-04-17 11:13:34,224 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)

def test_circle_circumference_positive_radius():
    radius = 5.0
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0.0
    expected_circumference = 0.0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

2025-04-17 11:13:36,813 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)

def test_circle_circumference_positive_radius():
    radius = 5.0
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0.0
    expected_circumference = 0.0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)
2025-04-17 11:13:37,428 - INFO - Test Case 5 processed successfully
2025-04-17 11:13:37,428 - INFO - 
TEST CASE 6 Retry 0
---------------
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest



def test_circle_circumference_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(radius)

---------------
2025-04-17 11:13:37,955 - INFO - TEST CASE 6 Retry 0 - Result - Passed
2025-04-17 11:13:37,955 - INFO - Before Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)

def test_circle_circumference_positive_radius():
    radius = 5.0
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0.0
    expected_circumference = 0.0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(radius)

2025-04-17 11:13:41,006 - INFO - After Improvement
import math
from theory_evaluation.circle_utils import circle_area, circle_circumference
import pytest


def test_circle_area_positive_radius():
    radius = 5.0
    expected_area = math.pi * radius ** 2
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_zero_radius():
    radius = 0.0
    expected_area = 0.0
    assert circle_area(radius) == pytest.approx(expected_area)

def test_circle_area_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_area(radius)

def test_circle_circumference_positive_radius():
    radius = 5.0
    expected_circumference = 2 * math.pi * radius
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_zero_radius():
    radius = 0.0
    expected_circumference = 0.0
    assert circle_circumference(radius) == pytest.approx(expected_circumference)

def test_circle_circumference_negative_radius():
    radius = -5.0
    with pytest.raises(ValueError, match="Radius cannot be negative."):
        circle_circumference(radius)
2025-04-17 11:13:41,733 - INFO - Test Case 6 processed successfully
2025-04-17 11:13:41,733 - INFO - run_each_pytest_function_individually complete
2025-04-17 11:13:41,733 - INFO - Statistic theory_evaluation\circle_utils.py: 
Total test case - 6
Total test case passed - 6
Percentage Passed - 100.0%

2025-04-17 11:13:41,734 - INFO - End Processing file: theory_evaluation\circle_utils.py

2025-04-17 11:13:41,734 - INFO - 
Start Processing file: theory_evaluation\llm_utils.py
2025-04-17 11:13:41,734 - INFO - Extraction of function and class start
2025-04-17 11:13:41,734 - INFO - extraction of function and class complete
2025-04-17 11:13:41,734 - INFO - Generate Unit Test Case starts
2025-04-17 11:13:41,734 - INFO - Extract unique import start
2025-04-17 11:13:42,321 - INFO - Extract unique import complete
2025-04-17 11:13:42,321 - INFO - Update relative import start
2025-04-17 11:13:42,322 - INFO - Update relative import complete
2025-04-17 11:13:48,710 - WARNING - Stripped Markdown-style triple backtick fences from LLM output.
2025-04-17 11:13:48,711 - INFO - Generate Unit Test Case complete
2025-04-17 11:13:48,716 - INFO - run_each_pytest_function_individually start
2025-04-17 11:13:57,454 - INFO - Number of test case to process - 5
2025-04-17 11:13:57,455 - INFO - 
TEST CASE 1 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

---------------
2025-04-17 11:13:58,122 - INFO - TEST CASE 1 Retry 0 - Result - Passed
2025-04-17 11:13:58,123 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

2025-04-17 11:13:59,777 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."
2025-04-17 11:14:00,471 - INFO - Test Case 1 processed successfully
2025-04-17 11:14:00,472 - INFO - 
TEST CASE 2 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

---------------
2025-04-17 11:14:01,074 - INFO - TEST CASE 2 Retry 0 - Result - Passed
2025-04-17 11:14:01,075 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

2025-04-17 11:14:02,808 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."
2025-04-17 11:14:03,477 - INFO - Test Case 2 processed successfully
2025-04-17 11:14:03,477 - INFO - 
TEST CASE 3 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_prompt_exception():
    agent = "test_agent"

---------------
2025-04-17 11:14:04,028 - INFO - TEST CASE 3 Retry 0 - Result - Passed
2025-04-17 11:14:04,029 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_exception():
    agent = "test_agent"

2025-04-17 11:14:05,696 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_exception():
    agent = "test_agent"
2025-04-17 11:14:06,409 - INFO - Test Case 3 processed successfully
2025-04-17 11:14:06,409 - INFO - 
TEST CASE 4 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "key: value"

---------------
2025-04-17 11:14:07,011 - INFO - TEST CASE 4 Retry 0 - Result - Passed
2025-04-17 11:14:07,011 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_exception():
    agent = "test_agent"

def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "key: value"

2025-04-17 11:14:08,912 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_exception():
    agent = "test_agent"

def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "key: value"
2025-04-17 11:14:10,157 - INFO - Test Case 4 processed successfully
2025-04-17 11:14:10,157 - INFO - 
TEST CASE 5 Retry 0
---------------
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest



def test_initialise_settings_exception():
    agent = "test_agent"

---------------
2025-04-17 11:14:10,861 - INFO - TEST CASE 5 Retry 0 - Result - Passed
2025-04-17 11:14:10,861 - INFO - Before Improvement
import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


import os
import re
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_exception():
    agent = "test_agent"

def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "key: value"

def test_initialise_settings_exception():
    agent = "test_agent"

2025-04-17 11:14:12,850 - INFO - After Improvement
import yaml
from theory_evaluation.llm_utils import initialise_prompt, initialise_settings
import pytest


def test_initialise_prompt_success():
    agent = "test_agent"
    config_yaml = "placeholder_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_missing_placeholder():
    agent = "test_agent"
    config_yaml = "another_value: 'test_value'"
    prompt_txt = "This is a {$placeholder_value} test."

def test_initialise_prompt_exception():
    agent = "test_agent"

def test_initialise_settings_success():
    agent = "test_agent"
    settings_yaml = "key: value"

def test_initialise_settings_exception():
    agent = "test_agent"
2025-04-17 11:14:13,516 - INFO - Test Case 5 processed successfully
2025-04-17 11:14:13,516 - INFO - run_each_pytest_function_individually complete
2025-04-17 11:14:13,516 - INFO - Statistic theory_evaluation\llm_utils.py: 
Total test case - 5
Total test case passed - 5
Percentage Passed - 100.0%

2025-04-17 11:14:13,517 - INFO - End Processing file: theory_evaluation\llm_utils.py

